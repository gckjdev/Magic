// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Error.pb.h"
// @@protoc_insertion_point(imports)

@implementation ErrorRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ErrorRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBErrorIsValidValue(PBError value) {
  switch (value) {
    case PBErrorErrorReadPostData:
    case PBErrorErrorParsePostData:
    case PBErrorErrorNoServiceForType:
    case PBErrorErrorServiceCatchException:
    case PBErrorErrorUnknown:
    case PBErrorErrorDataResponseNull:
    case PBErrorErrorJsonException:
    case PBErrorErrorIncorrectInputData:
    case PBErrorErrorResponseServiceDataNull:
    case PBErrorErrorUserLoginUnknownType:
    case PBErrorErrorUserLoginInfoEmpty:
    case PBErrorErrorUserRegisterUnknownType:
    case PBErrorErrorUserRegisterInfoEmpty:
    case PBErrorErrorUserRegisterInvalidInviteCode:
    case PBErrorErrorUserNotFound:
    case PBErrorErrorFriendNotFound:
    case PBErrorErrorFriendNotAllowAddMe:
    case PBErrorErrorInviteCodeNotExist:
    case PBErrorErrorInviteCodeUsed:
    case PBErrorErrorEmailEmpty:
    case PBErrorErrorMobileEmpty:
    case PBErrorErrorSnsidEmpty:
    case PBErrorErrorEmailRegistered:
    case PBErrorErrorPasswordInvalid:
    case PBErrorErrorSnsAuthFail:
    case PBErrorErrorSnsAuthCancel:
    case PBErrorErrorSnsAuthErrorUnknown:
    case PBErrorErrorSnsGetUserInfo:
    case PBErrorErrorInviteCodeNull:
    case PBErrorErrorNoInviteCodeAvailable:
    case PBErrorErrorUserTagListNull:
    case PBErrorErrorUserTagNameDuplicate:
    case PBErrorErrorSnsNoCredential:
    case PBErrorErrorMobileExist:
    case PBErrorErrorFeedActionInvalid:
    case PBErrorErrorCreateImage:
    case PBErrorErrorUploadImage:
    case PBErrorErrorFeedIdNull:
    case PBErrorErrorFeedActionIdNull:
    case PBErrorErrorFeedNotFound:
    case PBErrorErrorFeedActionNotFound:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBError(PBError value) {
  switch (value) {
    case PBErrorErrorReadPostData:
      return @"PBErrorErrorReadPostData";
    case PBErrorErrorParsePostData:
      return @"PBErrorErrorParsePostData";
    case PBErrorErrorNoServiceForType:
      return @"PBErrorErrorNoServiceForType";
    case PBErrorErrorServiceCatchException:
      return @"PBErrorErrorServiceCatchException";
    case PBErrorErrorUnknown:
      return @"PBErrorErrorUnknown";
    case PBErrorErrorDataResponseNull:
      return @"PBErrorErrorDataResponseNull";
    case PBErrorErrorJsonException:
      return @"PBErrorErrorJsonException";
    case PBErrorErrorIncorrectInputData:
      return @"PBErrorErrorIncorrectInputData";
    case PBErrorErrorResponseServiceDataNull:
      return @"PBErrorErrorResponseServiceDataNull";
    case PBErrorErrorUserLoginUnknownType:
      return @"PBErrorErrorUserLoginUnknownType";
    case PBErrorErrorUserLoginInfoEmpty:
      return @"PBErrorErrorUserLoginInfoEmpty";
    case PBErrorErrorUserRegisterUnknownType:
      return @"PBErrorErrorUserRegisterUnknownType";
    case PBErrorErrorUserRegisterInfoEmpty:
      return @"PBErrorErrorUserRegisterInfoEmpty";
    case PBErrorErrorUserRegisterInvalidInviteCode:
      return @"PBErrorErrorUserRegisterInvalidInviteCode";
    case PBErrorErrorUserNotFound:
      return @"PBErrorErrorUserNotFound";
    case PBErrorErrorFriendNotFound:
      return @"PBErrorErrorFriendNotFound";
    case PBErrorErrorFriendNotAllowAddMe:
      return @"PBErrorErrorFriendNotAllowAddMe";
    case PBErrorErrorInviteCodeNotExist:
      return @"PBErrorErrorInviteCodeNotExist";
    case PBErrorErrorInviteCodeUsed:
      return @"PBErrorErrorInviteCodeUsed";
    case PBErrorErrorEmailEmpty:
      return @"PBErrorErrorEmailEmpty";
    case PBErrorErrorMobileEmpty:
      return @"PBErrorErrorMobileEmpty";
    case PBErrorErrorSnsidEmpty:
      return @"PBErrorErrorSnsidEmpty";
    case PBErrorErrorEmailRegistered:
      return @"PBErrorErrorEmailRegistered";
    case PBErrorErrorPasswordInvalid:
      return @"PBErrorErrorPasswordInvalid";
    case PBErrorErrorSnsAuthFail:
      return @"PBErrorErrorSnsAuthFail";
    case PBErrorErrorSnsAuthCancel:
      return @"PBErrorErrorSnsAuthCancel";
    case PBErrorErrorSnsAuthErrorUnknown:
      return @"PBErrorErrorSnsAuthErrorUnknown";
    case PBErrorErrorSnsGetUserInfo:
      return @"PBErrorErrorSnsGetUserInfo";
    case PBErrorErrorInviteCodeNull:
      return @"PBErrorErrorInviteCodeNull";
    case PBErrorErrorNoInviteCodeAvailable:
      return @"PBErrorErrorNoInviteCodeAvailable";
    case PBErrorErrorUserTagListNull:
      return @"PBErrorErrorUserTagListNull";
    case PBErrorErrorUserTagNameDuplicate:
      return @"PBErrorErrorUserTagNameDuplicate";
    case PBErrorErrorSnsNoCredential:
      return @"PBErrorErrorSnsNoCredential";
    case PBErrorErrorMobileExist:
      return @"PBErrorErrorMobileExist";
    case PBErrorErrorFeedActionInvalid:
      return @"PBErrorErrorFeedActionInvalid";
    case PBErrorErrorCreateImage:
      return @"PBErrorErrorCreateImage";
    case PBErrorErrorUploadImage:
      return @"PBErrorErrorUploadImage";
    case PBErrorErrorFeedIdNull:
      return @"PBErrorErrorFeedIdNull";
    case PBErrorErrorFeedActionIdNull:
      return @"PBErrorErrorFeedActionIdNull";
    case PBErrorErrorFeedNotFound:
      return @"PBErrorErrorFeedNotFound";
    case PBErrorErrorFeedActionNotFound:
      return @"PBErrorErrorFeedActionNotFound";
    default:
      return nil;
  }
}


// @@protoc_insertion_point(global_scope)
