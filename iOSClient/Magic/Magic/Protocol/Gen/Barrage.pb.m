// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Barrage.pb.h"
// @@protoc_insertion_point(imports)

@implementation BarrageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BarrageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBBarrageStyleIsValidValue(PBBarrageStyle value) {
  switch (value) {
    case PBBarrageStylePopDecay:
    case PBBarrageStylePopSpring:
    case PBBarrageStylePopLinear:
    case PBBarrageStylePopEaseIn:
    case PBBarrageStylePopEaseOut:
    case PBBarrageStylePopEaseInout:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBBarrageStyle(PBBarrageStyle value) {
  switch (value) {
    case PBBarrageStylePopDecay:
      return @"PBBarrageStylePopDecay";
    case PBBarrageStylePopSpring:
      return @"PBBarrageStylePopSpring";
    case PBBarrageStylePopLinear:
      return @"PBBarrageStylePopLinear";
    case PBBarrageStylePopEaseIn:
      return @"PBBarrageStylePopEaseIn";
    case PBBarrageStylePopEaseOut:
      return @"PBBarrageStylePopEaseOut";
    case PBBarrageStylePopEaseInout:
      return @"PBBarrageStylePopEaseInout";
    default:
      return nil;
  }
}

BOOL PBBarrageModeIsValidValue(PBBarrageMode value) {
  switch (value) {
    case PBBarrageModeForComment:
    case PBBarrageModeForChat:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBBarrageMode(PBBarrageMode value) {
  switch (value) {
    case PBBarrageModeForComment:
      return @"PBBarrageModeForComment";
    case PBBarrageModeForChat:
      return @"PBBarrageModeForChat";
    default:
      return nil;
  }
}

BOOL PBBarrageSpeedIsValidValue(PBBarrageSpeed value) {
  switch (value) {
    case PBBarrageSpeedNormal:
    case PBBarrageSpeedSuperHigh:
    case PBBarrageSpeedHigh:
    case PBBarrageSpeedLow:
    case PBBarrageSpeedVeryLow:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBBarrageSpeed(PBBarrageSpeed value) {
  switch (value) {
    case PBBarrageSpeedNormal:
      return @"PBBarrageSpeedNormal";
    case PBBarrageSpeedSuperHigh:
      return @"PBBarrageSpeedSuperHigh";
    case PBBarrageSpeedHigh:
      return @"PBBarrageSpeedHigh";
    case PBBarrageSpeedLow:
      return @"PBBarrageSpeedLow";
    case PBBarrageSpeedVeryLow:
      return @"PBBarrageSpeedVeryLow";
    default:
      return nil;
  }
}

BOOL PBColorModeIsValidValue(PBColorMode value) {
  switch (value) {
    case PBColorModeWhiteTextBlackBg:
    case PBColorModeBlackTextWhiteBg:
    case PBColorModeCustomTextTransparentBg:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBColorMode(PBColorMode value) {
  switch (value) {
    case PBColorModeWhiteTextBlackBg:
      return @"PBColorModeWhiteTextBlackBg";
    case PBColorModeBlackTextWhiteBg:
      return @"PBColorModeBlackTextWhiteBg";
    case PBColorModeCustomTextTransparentBg:
      return @"PBColorModeCustomTextTransparentBg";
    default:
      return nil;
  }
}

BOOL PBMyNewFeedTypeIsValidValue(PBMyNewFeedType value) {
  switch (value) {
    case PBMyNewFeedTypeTypeNewFeedToMe:
    case PBMyNewFeedTypeTypeCommentMyFeed:
    case PBMyNewFeedTypeTypeMyInvolvedComment:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBMyNewFeedType(PBMyNewFeedType value) {
  switch (value) {
    case PBMyNewFeedTypeTypeNewFeedToMe:
      return @"PBMyNewFeedTypeTypeNewFeedToMe";
    case PBMyNewFeedTypeTypeCommentMyFeed:
      return @"PBMyNewFeedTypeTypeCommentMyFeed";
    case PBMyNewFeedTypeTypeMyInvolvedComment:
      return @"PBMyNewFeedTypeTypeMyInvolvedComment";
    default:
      return nil;
  }
}

@interface PBFeed ()
@property SInt32 type;
@property (strong) NSString* feedId;
@property (strong) PBUser* createUser;
@property (strong) NSMutableArray * toUsersArray;
@property BOOL openToAll;
@property (strong) PBDevice* device;
@property (strong) NSString* location;
@property Float32 longitude;
@property Float32 latitude;
@property (strong) NSString* cdnKey;
@property (strong) NSString* image;
@property (strong) NSString* text;
@property SInt32 date;
@property Float32 width;
@property Float32 height;
@property SInt32 bMode;
@property (strong) NSMutableArray * actionsArray;
@property SInt32 lastIndex;
@property SInt32 newCount;
@end

@implementation PBFeed

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) _value_ {
  hasFeedId_ = !!_value_;
}
@synthesize feedId;
- (BOOL) hasCreateUser {
  return !!hasCreateUser_;
}
- (void) setHasCreateUser:(BOOL) _value_ {
  hasCreateUser_ = !!_value_;
}
@synthesize createUser;
@synthesize toUsersArray;
@dynamic toUsers;
- (BOOL) hasOpenToAll {
  return !!hasOpenToAll_;
}
- (void) setHasOpenToAll:(BOOL) _value_ {
  hasOpenToAll_ = !!_value_;
}
- (BOOL) openToAll {
  return !!openToAll_;
}
- (void) setOpenToAll:(BOOL) _value_ {
  openToAll_ = !!_value_;
}
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasCdnKey {
  return !!hasCdnKey_;
}
- (void) setHasCdnKey:(BOOL) _value_ {
  hasCdnKey_ = !!_value_;
}
@synthesize cdnKey;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) _value_ {
  hasDate_ = !!_value_;
}
@synthesize date;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (BOOL) hasBMode {
  return !!hasBMode_;
}
- (void) setHasBMode:(BOOL) _value_ {
  hasBMode_ = !!_value_;
}
@synthesize bMode;
@synthesize actionsArray;
@dynamic actions;
- (BOOL) hasLastIndex {
  return !!hasLastIndex_;
}
- (void) setHasLastIndex:(BOOL) _value_ {
  hasLastIndex_ = !!_value_;
}
@synthesize lastIndex;
- (BOOL) hasNewCount {
  return !!hasNewCount_;
}
- (void) setHasNewCount:(BOOL) _value_ {
  hasNewCount_ = !!_value_;
}
@synthesize newCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.feedId = @"";
    self.createUser = [PBUser defaultInstance];
    self.openToAll = NO;
    self.device = [PBDevice defaultInstance];
    self.location = @"";
    self.longitude = 0;
    self.latitude = 0;
    self.cdnKey = @"";
    self.image = @"";
    self.text = @"";
    self.date = 0;
    self.width = 0;
    self.height = 0;
    self.bMode = 0;
    self.lastIndex = 0;
    self.newCount = 0;
  }
  return self;
}
static PBFeed* defaultPBFeedInstance = nil;
+ (void) initialize {
  if (self == [PBFeed class]) {
    defaultPBFeedInstance = [[PBFeed alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (NSArray *)toUsers {
  return toUsersArray;
}
- (PBUser*)toUsersAtIndex:(NSUInteger)index {
  return [toUsersArray objectAtIndex:index];
}
- (NSArray *)actions {
  return actionsArray;
}
- (PBFeedAction*)actionsAtIndex:(NSUInteger)index {
  return [actionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCreateUser) {
    if (!self.createUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInittoUsers = YES;
   [self.toUsers enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittoUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInittoUsers) return isInittoUsers;
  if (self.hasDevice) {
    if (!self.device.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitactions = YES;
   [self.actions enumerateObjectsUsingBlock:^(PBFeedAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitactions = NO;
      *stop = YES;
    }
  }];
  if (!isInitactions) return isInitactions;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasFeedId) {
    [output writeString:2 value:self.feedId];
  }
  if (self.hasCreateUser) {
    [output writeMessage:3 value:self.createUser];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasOpenToAll) {
    [output writeBool:5 value:self.openToAll];
  }
  if (self.hasDevice) {
    [output writeMessage:30 value:self.device];
  }
  if (self.hasLocation) {
    [output writeString:34 value:self.location];
  }
  if (self.hasLongitude) {
    [output writeFloat:35 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeFloat:36 value:self.latitude];
  }
  if (self.hasCdnKey) {
    [output writeString:40 value:self.cdnKey];
  }
  if (self.hasImage) {
    [output writeString:41 value:self.image];
  }
  if (self.hasText) {
    [output writeString:42 value:self.text];
  }
  if (self.hasDate) {
    [output writeInt32:43 value:self.date];
  }
  if (self.hasWidth) {
    [output writeFloat:44 value:self.width];
  }
  if (self.hasHeight) {
    [output writeFloat:45 value:self.height];
  }
  if (self.hasBMode) {
    [output writeInt32:50 value:self.bMode];
  }
  [self.actionsArray enumerateObjectsUsingBlock:^(PBFeedAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:100 value:element];
  }];
  if (self.hasLastIndex) {
    [output writeInt32:101 value:self.lastIndex];
  }
  if (self.hasNewCount) {
    [output writeInt32:102 value:self.newCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasFeedId) {
    size_ += computeStringSize(2, self.feedId);
  }
  if (self.hasCreateUser) {
    size_ += computeMessageSize(3, self.createUser);
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasOpenToAll) {
    size_ += computeBoolSize(5, self.openToAll);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(30, self.device);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(34, self.location);
  }
  if (self.hasLongitude) {
    size_ += computeFloatSize(35, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeFloatSize(36, self.latitude);
  }
  if (self.hasCdnKey) {
    size_ += computeStringSize(40, self.cdnKey);
  }
  if (self.hasImage) {
    size_ += computeStringSize(41, self.image);
  }
  if (self.hasText) {
    size_ += computeStringSize(42, self.text);
  }
  if (self.hasDate) {
    size_ += computeInt32Size(43, self.date);
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(44, self.width);
  }
  if (self.hasHeight) {
    size_ += computeFloatSize(45, self.height);
  }
  if (self.hasBMode) {
    size_ += computeInt32Size(50, self.bMode);
  }
  [self.actionsArray enumerateObjectsUsingBlock:^(PBFeedAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(100, element);
  }];
  if (self.hasLastIndex) {
    size_ += computeInt32Size(101, self.lastIndex);
  }
  if (self.hasNewCount) {
    size_ += computeInt32Size(102, self.newCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFeed*) parseFromData:(NSData*) data {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data] build];
}
+ (PBFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedBuilder*) builder {
  return [[PBFeedBuilder alloc] init];
}
+ (PBFeedBuilder*) builderWithPrototype:(PBFeed*) prototype {
  return [[PBFeed builder] mergeFrom:prototype];
}
- (PBFeedBuilder*) builder {
  return [PBFeed builder];
}
- (PBFeedBuilder*) toBuilder {
  return [PBFeed builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasFeedId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", self.feedId];
  }
  if (self.hasCreateUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"createUser"];
    [self.createUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"toUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOpenToAll) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openToAll", [NSNumber numberWithBool:self.openToAll]];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithFloat:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasCdnKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cdnKey", self.cdnKey];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInteger:self.date]];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithFloat:self.height]];
  }
  if (self.hasBMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bMode", [NSNumber numberWithInteger:self.bMode]];
  }
  [self.actionsArray enumerateObjectsUsingBlock:^(PBFeedAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"actions"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLastIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastIndex", [NSNumber numberWithInteger:self.lastIndex]];
  }
  if (self.hasNewCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newCount", [NSNumber numberWithInteger:self.newCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFeed class]]) {
    return NO;
  }
  PBFeed *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasFeedId == otherMessage.hasFeedId &&
      (!self.hasFeedId || [self.feedId isEqual:otherMessage.feedId]) &&
      self.hasCreateUser == otherMessage.hasCreateUser &&
      (!self.hasCreateUser || [self.createUser isEqual:otherMessage.createUser]) &&
      [self.toUsersArray isEqualToArray:otherMessage.toUsersArray] &&
      self.hasOpenToAll == otherMessage.hasOpenToAll &&
      (!self.hasOpenToAll || self.openToAll == otherMessage.openToAll) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasCdnKey == otherMessage.hasCdnKey &&
      (!self.hasCdnKey || [self.cdnKey isEqual:otherMessage.cdnKey]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      self.hasBMode == otherMessage.hasBMode &&
      (!self.hasBMode || self.bMode == otherMessage.bMode) &&
      [self.actionsArray isEqualToArray:otherMessage.actionsArray] &&
      self.hasLastIndex == otherMessage.hasLastIndex &&
      (!self.hasLastIndex || self.lastIndex == otherMessage.lastIndex) &&
      self.hasNewCount == otherMessage.hasNewCount &&
      (!self.hasNewCount || self.newCount == otherMessage.newCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasFeedId) {
    hashCode = hashCode * 31 + [self.feedId hash];
  }
  if (self.hasCreateUser) {
    hashCode = hashCode * 31 + [self.createUser hash];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpenToAll) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.openToAll] hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasCdnKey) {
    hashCode = hashCode * 31 + [self.cdnKey hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.date] hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.height] hash];
  }
  if (self.hasBMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bMode] hash];
  }
  [self.actionsArray enumerateObjectsUsingBlock:^(PBFeedAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLastIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastIndex] hash];
  }
  if (self.hasNewCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.newCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFeedBuilder()
@property (strong) PBFeed* resultPbfeed;
@end

@implementation PBFeedBuilder
@synthesize resultPbfeed;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbfeed = [[PBFeed alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbfeed;
}
- (PBFeedBuilder*) clear {
  self.resultPbfeed = [[PBFeed alloc] init];
  return self;
}
- (PBFeedBuilder*) clone {
  return [PBFeed builderWithPrototype:resultPbfeed];
}
- (PBFeed*) defaultInstance {
  return [PBFeed defaultInstance];
}
- (PBFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeed*) buildPartial {
  PBFeed* returnMe = resultPbfeed;
  self.resultPbfeed = nil;
  return returnMe;
}
- (PBFeedBuilder*) mergeFrom:(PBFeed*) other {
  if (other == [PBFeed defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasCreateUser) {
    [self mergeCreateUser:other.createUser];
  }
  if (other.toUsersArray.count > 0) {
    if (resultPbfeed.toUsersArray == nil) {
      resultPbfeed.toUsersArray = [[NSMutableArray alloc] initWithArray:other.toUsersArray];
    } else {
      [resultPbfeed.toUsersArray addObjectsFromArray:other.toUsersArray];
    }
  }
  if (other.hasOpenToAll) {
    [self setOpenToAll:other.openToAll];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasCdnKey) {
    [self setCdnKey:other.cdnKey];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  if (other.hasBMode) {
    [self setBMode:other.bMode];
  }
  if (other.actionsArray.count > 0) {
    if (resultPbfeed.actionsArray == nil) {
      resultPbfeed.actionsArray = [[NSMutableArray alloc] initWithArray:other.actionsArray];
    } else {
      [resultPbfeed.actionsArray addObjectsFromArray:other.actionsArray];
    }
  }
  if (other.hasLastIndex) {
    [self setLastIndex:other.lastIndex];
  }
  if (other.hasNewCount) {
    [self setNewCount:other.newCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setFeedId:[input readString]];
        break;
      }
      case 26: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasCreateUser) {
          [subBuilder mergeFrom:self.createUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateUser:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addToUsers:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setOpenToAll:[input readBool]];
        break;
      }
      case 242: {
        PBDeviceBuilder* subBuilder = [PBDevice builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        [self setLocation:[input readString]];
        break;
      }
      case 285: {
        [self setLongitude:[input readFloat]];
        break;
      }
      case 293: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 322: {
        [self setCdnKey:[input readString]];
        break;
      }
      case 330: {
        [self setImage:[input readString]];
        break;
      }
      case 338: {
        [self setText:[input readString]];
        break;
      }
      case 344: {
        [self setDate:[input readInt32]];
        break;
      }
      case 357: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 365: {
        [self setHeight:[input readFloat]];
        break;
      }
      case 400: {
        [self setBMode:[input readInt32]];
        break;
      }
      case 802: {
        PBFeedActionBuilder* subBuilder = [PBFeedAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addActions:[subBuilder buildPartial]];
        break;
      }
      case 808: {
        [self setLastIndex:[input readInt32]];
        break;
      }
      case 816: {
        [self setNewCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbfeed.hasType;
}
- (SInt32) type {
  return resultPbfeed.type;
}
- (PBFeedBuilder*) setType:(SInt32) value {
  resultPbfeed.hasType = YES;
  resultPbfeed.type = value;
  return self;
}
- (PBFeedBuilder*) clearType {
  resultPbfeed.hasType = NO;
  resultPbfeed.type = 0;
  return self;
}
- (BOOL) hasFeedId {
  return resultPbfeed.hasFeedId;
}
- (NSString*) feedId {
  return resultPbfeed.feedId;
}
- (PBFeedBuilder*) setFeedId:(NSString*) value {
  resultPbfeed.hasFeedId = YES;
  resultPbfeed.feedId = value;
  return self;
}
- (PBFeedBuilder*) clearFeedId {
  resultPbfeed.hasFeedId = NO;
  resultPbfeed.feedId = @"";
  return self;
}
- (BOOL) hasCreateUser {
  return resultPbfeed.hasCreateUser;
}
- (PBUser*) createUser {
  return resultPbfeed.createUser;
}
- (PBFeedBuilder*) setCreateUser:(PBUser*) value {
  resultPbfeed.hasCreateUser = YES;
  resultPbfeed.createUser = value;
  return self;
}
- (PBFeedBuilder*) setCreateUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setCreateUser:[builderForValue build]];
}
- (PBFeedBuilder*) mergeCreateUser:(PBUser*) value {
  if (resultPbfeed.hasCreateUser &&
      resultPbfeed.createUser != [PBUser defaultInstance]) {
    resultPbfeed.createUser =
      [[[PBUser builderWithPrototype:resultPbfeed.createUser] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.createUser = value;
  }
  resultPbfeed.hasCreateUser = YES;
  return self;
}
- (PBFeedBuilder*) clearCreateUser {
  resultPbfeed.hasCreateUser = NO;
  resultPbfeed.createUser = [PBUser defaultInstance];
  return self;
}
- (NSMutableArray *)toUsers {
  return resultPbfeed.toUsersArray;
}
- (PBUser*)toUsersAtIndex:(NSUInteger)index {
  return [resultPbfeed toUsersAtIndex:index];
}
- (PBFeedBuilder *)addToUsers:(PBUser*)value {
  if (resultPbfeed.toUsersArray == nil) {
    resultPbfeed.toUsersArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.toUsersArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setToUsersArray:(NSArray *)array {
  resultPbfeed.toUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearToUsers {
  resultPbfeed.toUsersArray = nil;
  return self;
}
- (BOOL) hasOpenToAll {
  return resultPbfeed.hasOpenToAll;
}
- (BOOL) openToAll {
  return resultPbfeed.openToAll;
}
- (PBFeedBuilder*) setOpenToAll:(BOOL) value {
  resultPbfeed.hasOpenToAll = YES;
  resultPbfeed.openToAll = value;
  return self;
}
- (PBFeedBuilder*) clearOpenToAll {
  resultPbfeed.hasOpenToAll = NO;
  resultPbfeed.openToAll = NO;
  return self;
}
- (BOOL) hasDevice {
  return resultPbfeed.hasDevice;
}
- (PBDevice*) device {
  return resultPbfeed.device;
}
- (PBFeedBuilder*) setDevice:(PBDevice*) value {
  resultPbfeed.hasDevice = YES;
  resultPbfeed.device = value;
  return self;
}
- (PBFeedBuilder*) setDeviceBuilder:(PBDeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (PBFeedBuilder*) mergeDevice:(PBDevice*) value {
  if (resultPbfeed.hasDevice &&
      resultPbfeed.device != [PBDevice defaultInstance]) {
    resultPbfeed.device =
      [[[PBDevice builderWithPrototype:resultPbfeed.device] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.device = value;
  }
  resultPbfeed.hasDevice = YES;
  return self;
}
- (PBFeedBuilder*) clearDevice {
  resultPbfeed.hasDevice = NO;
  resultPbfeed.device = [PBDevice defaultInstance];
  return self;
}
- (BOOL) hasLocation {
  return resultPbfeed.hasLocation;
}
- (NSString*) location {
  return resultPbfeed.location;
}
- (PBFeedBuilder*) setLocation:(NSString*) value {
  resultPbfeed.hasLocation = YES;
  resultPbfeed.location = value;
  return self;
}
- (PBFeedBuilder*) clearLocation {
  resultPbfeed.hasLocation = NO;
  resultPbfeed.location = @"";
  return self;
}
- (BOOL) hasLongitude {
  return resultPbfeed.hasLongitude;
}
- (Float32) longitude {
  return resultPbfeed.longitude;
}
- (PBFeedBuilder*) setLongitude:(Float32) value {
  resultPbfeed.hasLongitude = YES;
  resultPbfeed.longitude = value;
  return self;
}
- (PBFeedBuilder*) clearLongitude {
  resultPbfeed.hasLongitude = NO;
  resultPbfeed.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultPbfeed.hasLatitude;
}
- (Float32) latitude {
  return resultPbfeed.latitude;
}
- (PBFeedBuilder*) setLatitude:(Float32) value {
  resultPbfeed.hasLatitude = YES;
  resultPbfeed.latitude = value;
  return self;
}
- (PBFeedBuilder*) clearLatitude {
  resultPbfeed.hasLatitude = NO;
  resultPbfeed.latitude = 0;
  return self;
}
- (BOOL) hasCdnKey {
  return resultPbfeed.hasCdnKey;
}
- (NSString*) cdnKey {
  return resultPbfeed.cdnKey;
}
- (PBFeedBuilder*) setCdnKey:(NSString*) value {
  resultPbfeed.hasCdnKey = YES;
  resultPbfeed.cdnKey = value;
  return self;
}
- (PBFeedBuilder*) clearCdnKey {
  resultPbfeed.hasCdnKey = NO;
  resultPbfeed.cdnKey = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbfeed.hasImage;
}
- (NSString*) image {
  return resultPbfeed.image;
}
- (PBFeedBuilder*) setImage:(NSString*) value {
  resultPbfeed.hasImage = YES;
  resultPbfeed.image = value;
  return self;
}
- (PBFeedBuilder*) clearImage {
  resultPbfeed.hasImage = NO;
  resultPbfeed.image = @"";
  return self;
}
- (BOOL) hasText {
  return resultPbfeed.hasText;
}
- (NSString*) text {
  return resultPbfeed.text;
}
- (PBFeedBuilder*) setText:(NSString*) value {
  resultPbfeed.hasText = YES;
  resultPbfeed.text = value;
  return self;
}
- (PBFeedBuilder*) clearText {
  resultPbfeed.hasText = NO;
  resultPbfeed.text = @"";
  return self;
}
- (BOOL) hasDate {
  return resultPbfeed.hasDate;
}
- (SInt32) date {
  return resultPbfeed.date;
}
- (PBFeedBuilder*) setDate:(SInt32) value {
  resultPbfeed.hasDate = YES;
  resultPbfeed.date = value;
  return self;
}
- (PBFeedBuilder*) clearDate {
  resultPbfeed.hasDate = NO;
  resultPbfeed.date = 0;
  return self;
}
- (BOOL) hasWidth {
  return resultPbfeed.hasWidth;
}
- (Float32) width {
  return resultPbfeed.width;
}
- (PBFeedBuilder*) setWidth:(Float32) value {
  resultPbfeed.hasWidth = YES;
  resultPbfeed.width = value;
  return self;
}
- (PBFeedBuilder*) clearWidth {
  resultPbfeed.hasWidth = NO;
  resultPbfeed.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultPbfeed.hasHeight;
}
- (Float32) height {
  return resultPbfeed.height;
}
- (PBFeedBuilder*) setHeight:(Float32) value {
  resultPbfeed.hasHeight = YES;
  resultPbfeed.height = value;
  return self;
}
- (PBFeedBuilder*) clearHeight {
  resultPbfeed.hasHeight = NO;
  resultPbfeed.height = 0;
  return self;
}
- (BOOL) hasBMode {
  return resultPbfeed.hasBMode;
}
- (SInt32) bMode {
  return resultPbfeed.bMode;
}
- (PBFeedBuilder*) setBMode:(SInt32) value {
  resultPbfeed.hasBMode = YES;
  resultPbfeed.bMode = value;
  return self;
}
- (PBFeedBuilder*) clearBMode {
  resultPbfeed.hasBMode = NO;
  resultPbfeed.bMode = 0;
  return self;
}
- (NSMutableArray *)actions {
  return resultPbfeed.actionsArray;
}
- (PBFeedAction*)actionsAtIndex:(NSUInteger)index {
  return [resultPbfeed actionsAtIndex:index];
}
- (PBFeedBuilder *)addActions:(PBFeedAction*)value {
  if (resultPbfeed.actionsArray == nil) {
    resultPbfeed.actionsArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.actionsArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setActionsArray:(NSArray *)array {
  resultPbfeed.actionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearActions {
  resultPbfeed.actionsArray = nil;
  return self;
}
- (BOOL) hasLastIndex {
  return resultPbfeed.hasLastIndex;
}
- (SInt32) lastIndex {
  return resultPbfeed.lastIndex;
}
- (PBFeedBuilder*) setLastIndex:(SInt32) value {
  resultPbfeed.hasLastIndex = YES;
  resultPbfeed.lastIndex = value;
  return self;
}
- (PBFeedBuilder*) clearLastIndex {
  resultPbfeed.hasLastIndex = NO;
  resultPbfeed.lastIndex = 0;
  return self;
}
- (BOOL) hasNewCount {
  return resultPbfeed.hasNewCount;
}
- (SInt32) newCount {
  return resultPbfeed.newCount;
}
- (PBFeedBuilder*) setNewCount:(SInt32) value {
  resultPbfeed.hasNewCount = YES;
  resultPbfeed.newCount = value;
  return self;
}
- (PBFeedBuilder*) clearNewCount {
  resultPbfeed.hasNewCount = NO;
  resultPbfeed.newCount = 0;
  return self;
}
@end

@interface PBFeedAction ()
@property (strong) NSString* actionId;
@property SInt32 type;
@property (strong) NSString* feedId;
@property (strong) PBUser* user;
@property (strong) NSString* text;
@property (strong) NSString* avatar;
@property BOOL showAvatar;
@property Float32 posX;
@property Float32 posY;
@property SInt32 colorMode;
@property SInt32 color;
@property SInt32 angel;
@property BOOL hasBg;
@property SInt32 date;
@property SInt32 bStyle;
@end

@implementation PBFeedAction

- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) _value_ {
  hasFeedId_ = !!_value_;
}
@synthesize feedId;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasShowAvatar {
  return !!hasShowAvatar_;
}
- (void) setHasShowAvatar:(BOOL) _value_ {
  hasShowAvatar_ = !!_value_;
}
- (BOOL) showAvatar {
  return !!showAvatar_;
}
- (void) setShowAvatar:(BOOL) _value_ {
  showAvatar_ = !!_value_;
}
- (BOOL) hasPosX {
  return !!hasPosX_;
}
- (void) setHasPosX:(BOOL) _value_ {
  hasPosX_ = !!_value_;
}
@synthesize posX;
- (BOOL) hasPosY {
  return !!hasPosY_;
}
- (void) setHasPosY:(BOOL) _value_ {
  hasPosY_ = !!_value_;
}
@synthesize posY;
- (BOOL) hasColorMode {
  return !!hasColorMode_;
}
- (void) setHasColorMode:(BOOL) _value_ {
  hasColorMode_ = !!_value_;
}
@synthesize colorMode;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasAngel {
  return !!hasAngel_;
}
- (void) setHasAngel:(BOOL) _value_ {
  hasAngel_ = !!_value_;
}
@synthesize angel;
- (BOOL) hasHasBg {
  return !!hasHasBg_;
}
- (void) setHasHasBg:(BOOL) _value_ {
  hasHasBg_ = !!_value_;
}
- (BOOL) hasBg {
  return !!hasBg_;
}
- (void) setHasBg:(BOOL) _value_ {
  hasBg_ = !!_value_;
}
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) _value_ {
  hasDate_ = !!_value_;
}
@synthesize date;
- (BOOL) hasBStyle {
  return !!hasBStyle_;
}
- (void) setHasBStyle:(BOOL) _value_ {
  hasBStyle_ = !!_value_;
}
@synthesize bStyle;
- (instancetype) init {
  if ((self = [super init])) {
    self.actionId = @"";
    self.type = 0;
    self.feedId = @"";
    self.user = [PBUser defaultInstance];
    self.text = @"";
    self.avatar = @"";
    self.showAvatar = YES;
    self.posX = 0;
    self.posY = 0;
    self.colorMode = 0;
    self.color = 0;
    self.angel = 0;
    self.hasBg = YES;
    self.date = 0;
    self.bStyle = 0;
  }
  return self;
}
static PBFeedAction* defaultPBFeedActionInstance = nil;
+ (void) initialize {
  if (self == [PBFeedAction class]) {
    defaultPBFeedActionInstance = [[PBFeedAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFeedActionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFeedActionInstance;
}
- (BOOL) isInitialized {
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActionId) {
    [output writeString:1 value:self.actionId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasFeedId) {
    [output writeString:3 value:self.feedId];
  }
  if (self.hasUser) {
    [output writeMessage:4 value:self.user];
  }
  if (self.hasText) {
    [output writeString:5 value:self.text];
  }
  if (self.hasAvatar) {
    [output writeString:6 value:self.avatar];
  }
  if (self.hasShowAvatar) {
    [output writeBool:7 value:self.showAvatar];
  }
  if (self.hasPosX) {
    [output writeFloat:10 value:self.posX];
  }
  if (self.hasPosY) {
    [output writeFloat:11 value:self.posY];
  }
  if (self.hasColorMode) {
    [output writeInt32:12 value:self.colorMode];
  }
  if (self.hasColor) {
    [output writeInt32:13 value:self.color];
  }
  if (self.hasAngel) {
    [output writeInt32:18 value:self.angel];
  }
  if (self.hasHasBg) {
    [output writeBool:19 value:self.hasBg];
  }
  if (self.hasDate) {
    [output writeInt32:20 value:self.date];
  }
  if (self.hasBStyle) {
    [output writeInt32:30 value:self.bStyle];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasActionId) {
    size_ += computeStringSize(1, self.actionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasFeedId) {
    size_ += computeStringSize(3, self.feedId);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(4, self.user);
  }
  if (self.hasText) {
    size_ += computeStringSize(5, self.text);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(6, self.avatar);
  }
  if (self.hasShowAvatar) {
    size_ += computeBoolSize(7, self.showAvatar);
  }
  if (self.hasPosX) {
    size_ += computeFloatSize(10, self.posX);
  }
  if (self.hasPosY) {
    size_ += computeFloatSize(11, self.posY);
  }
  if (self.hasColorMode) {
    size_ += computeInt32Size(12, self.colorMode);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(13, self.color);
  }
  if (self.hasAngel) {
    size_ += computeInt32Size(18, self.angel);
  }
  if (self.hasHasBg) {
    size_ += computeBoolSize(19, self.hasBg);
  }
  if (self.hasDate) {
    size_ += computeInt32Size(20, self.date);
  }
  if (self.hasBStyle) {
    size_ += computeInt32Size(30, self.bStyle);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFeedAction*) parseFromData:(NSData*) data {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromData:data] build];
}
+ (PBFeedAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeedAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromInputStream:input] build];
}
+ (PBFeedAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeedAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedAction*)[[[PBFeedAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedActionBuilder*) builder {
  return [[PBFeedActionBuilder alloc] init];
}
+ (PBFeedActionBuilder*) builderWithPrototype:(PBFeedAction*) prototype {
  return [[PBFeedAction builder] mergeFrom:prototype];
}
- (PBFeedActionBuilder*) builder {
  return [PBFeedAction builder];
}
- (PBFeedActionBuilder*) toBuilder {
  return [PBFeedAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasFeedId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", self.feedId];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasShowAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showAvatar", [NSNumber numberWithBool:self.showAvatar]];
  }
  if (self.hasPosX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"posX", [NSNumber numberWithFloat:self.posX]];
  }
  if (self.hasPosY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"posY", [NSNumber numberWithFloat:self.posY]];
  }
  if (self.hasColorMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"colorMode", [NSNumber numberWithInteger:self.colorMode]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  if (self.hasAngel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"angel", [NSNumber numberWithInteger:self.angel]];
  }
  if (self.hasHasBg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasBg", [NSNumber numberWithBool:self.hasBg]];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInteger:self.date]];
  }
  if (self.hasBStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bStyle", [NSNumber numberWithInteger:self.bStyle]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFeedAction class]]) {
    return NO;
  }
  PBFeedAction *otherMessage = other;
  return
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasFeedId == otherMessage.hasFeedId &&
      (!self.hasFeedId || [self.feedId isEqual:otherMessage.feedId]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasShowAvatar == otherMessage.hasShowAvatar &&
      (!self.hasShowAvatar || self.showAvatar == otherMessage.showAvatar) &&
      self.hasPosX == otherMessage.hasPosX &&
      (!self.hasPosX || self.posX == otherMessage.posX) &&
      self.hasPosY == otherMessage.hasPosY &&
      (!self.hasPosY || self.posY == otherMessage.posY) &&
      self.hasColorMode == otherMessage.hasColorMode &&
      (!self.hasColorMode || self.colorMode == otherMessage.colorMode) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      self.hasAngel == otherMessage.hasAngel &&
      (!self.hasAngel || self.angel == otherMessage.angel) &&
      self.hasHasBg == otherMessage.hasHasBg &&
      (!self.hasHasBg || self.hasBg == otherMessage.hasBg) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasBStyle == otherMessage.hasBStyle &&
      (!self.hasBStyle || self.bStyle == otherMessage.bStyle) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasFeedId) {
    hashCode = hashCode * 31 + [self.feedId hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasShowAvatar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.showAvatar] hash];
  }
  if (self.hasPosX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.posX] hash];
  }
  if (self.hasPosY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.posY] hash];
  }
  if (self.hasColorMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.colorMode] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  if (self.hasAngel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.angel] hash];
  }
  if (self.hasHasBg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasBg] hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.date] hash];
  }
  if (self.hasBStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bStyle] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFeedActionBuilder()
@property (strong) PBFeedAction* resultPbfeedAction;
@end

@implementation PBFeedActionBuilder
@synthesize resultPbfeedAction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbfeedAction = [[PBFeedAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbfeedAction;
}
- (PBFeedActionBuilder*) clear {
  self.resultPbfeedAction = [[PBFeedAction alloc] init];
  return self;
}
- (PBFeedActionBuilder*) clone {
  return [PBFeedAction builderWithPrototype:resultPbfeedAction];
}
- (PBFeedAction*) defaultInstance {
  return [PBFeedAction defaultInstance];
}
- (PBFeedAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeedAction*) buildPartial {
  PBFeedAction* returnMe = resultPbfeedAction;
  self.resultPbfeedAction = nil;
  return returnMe;
}
- (PBFeedActionBuilder*) mergeFrom:(PBFeedAction*) other {
  if (other == [PBFeedAction defaultInstance]) {
    return self;
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasShowAvatar) {
    [self setShowAvatar:other.showAvatar];
  }
  if (other.hasPosX) {
    [self setPosX:other.posX];
  }
  if (other.hasPosY) {
    [self setPosY:other.posY];
  }
  if (other.hasColorMode) {
    [self setColorMode:other.colorMode];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasAngel) {
    [self setAngel:other.angel];
  }
  if (other.hasHasBg) {
    [self setHasBg:other.hasBg];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasBStyle) {
    [self setBStyle:other.bStyle];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setActionId:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 26: {
        [self setFeedId:[input readString]];
        break;
      }
      case 34: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setText:[input readString]];
        break;
      }
      case 50: {
        [self setAvatar:[input readString]];
        break;
      }
      case 56: {
        [self setShowAvatar:[input readBool]];
        break;
      }
      case 85: {
        [self setPosX:[input readFloat]];
        break;
      }
      case 93: {
        [self setPosY:[input readFloat]];
        break;
      }
      case 96: {
        [self setColorMode:[input readInt32]];
        break;
      }
      case 104: {
        [self setColor:[input readInt32]];
        break;
      }
      case 144: {
        [self setAngel:[input readInt32]];
        break;
      }
      case 152: {
        [self setHasBg:[input readBool]];
        break;
      }
      case 160: {
        [self setDate:[input readInt32]];
        break;
      }
      case 240: {
        [self setBStyle:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasActionId {
  return resultPbfeedAction.hasActionId;
}
- (NSString*) actionId {
  return resultPbfeedAction.actionId;
}
- (PBFeedActionBuilder*) setActionId:(NSString*) value {
  resultPbfeedAction.hasActionId = YES;
  resultPbfeedAction.actionId = value;
  return self;
}
- (PBFeedActionBuilder*) clearActionId {
  resultPbfeedAction.hasActionId = NO;
  resultPbfeedAction.actionId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbfeedAction.hasType;
}
- (SInt32) type {
  return resultPbfeedAction.type;
}
- (PBFeedActionBuilder*) setType:(SInt32) value {
  resultPbfeedAction.hasType = YES;
  resultPbfeedAction.type = value;
  return self;
}
- (PBFeedActionBuilder*) clearType {
  resultPbfeedAction.hasType = NO;
  resultPbfeedAction.type = 0;
  return self;
}
- (BOOL) hasFeedId {
  return resultPbfeedAction.hasFeedId;
}
- (NSString*) feedId {
  return resultPbfeedAction.feedId;
}
- (PBFeedActionBuilder*) setFeedId:(NSString*) value {
  resultPbfeedAction.hasFeedId = YES;
  resultPbfeedAction.feedId = value;
  return self;
}
- (PBFeedActionBuilder*) clearFeedId {
  resultPbfeedAction.hasFeedId = NO;
  resultPbfeedAction.feedId = @"";
  return self;
}
- (BOOL) hasUser {
  return resultPbfeedAction.hasUser;
}
- (PBUser*) user {
  return resultPbfeedAction.user;
}
- (PBFeedActionBuilder*) setUser:(PBUser*) value {
  resultPbfeedAction.hasUser = YES;
  resultPbfeedAction.user = value;
  return self;
}
- (PBFeedActionBuilder*) setUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (PBFeedActionBuilder*) mergeUser:(PBUser*) value {
  if (resultPbfeedAction.hasUser &&
      resultPbfeedAction.user != [PBUser defaultInstance]) {
    resultPbfeedAction.user =
      [[[PBUser builderWithPrototype:resultPbfeedAction.user] mergeFrom:value] buildPartial];
  } else {
    resultPbfeedAction.user = value;
  }
  resultPbfeedAction.hasUser = YES;
  return self;
}
- (PBFeedActionBuilder*) clearUser {
  resultPbfeedAction.hasUser = NO;
  resultPbfeedAction.user = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasText {
  return resultPbfeedAction.hasText;
}
- (NSString*) text {
  return resultPbfeedAction.text;
}
- (PBFeedActionBuilder*) setText:(NSString*) value {
  resultPbfeedAction.hasText = YES;
  resultPbfeedAction.text = value;
  return self;
}
- (PBFeedActionBuilder*) clearText {
  resultPbfeedAction.hasText = NO;
  resultPbfeedAction.text = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbfeedAction.hasAvatar;
}
- (NSString*) avatar {
  return resultPbfeedAction.avatar;
}
- (PBFeedActionBuilder*) setAvatar:(NSString*) value {
  resultPbfeedAction.hasAvatar = YES;
  resultPbfeedAction.avatar = value;
  return self;
}
- (PBFeedActionBuilder*) clearAvatar {
  resultPbfeedAction.hasAvatar = NO;
  resultPbfeedAction.avatar = @"";
  return self;
}
- (BOOL) hasShowAvatar {
  return resultPbfeedAction.hasShowAvatar;
}
- (BOOL) showAvatar {
  return resultPbfeedAction.showAvatar;
}
- (PBFeedActionBuilder*) setShowAvatar:(BOOL) value {
  resultPbfeedAction.hasShowAvatar = YES;
  resultPbfeedAction.showAvatar = value;
  return self;
}
- (PBFeedActionBuilder*) clearShowAvatar {
  resultPbfeedAction.hasShowAvatar = NO;
  resultPbfeedAction.showAvatar = YES;
  return self;
}
- (BOOL) hasPosX {
  return resultPbfeedAction.hasPosX;
}
- (Float32) posX {
  return resultPbfeedAction.posX;
}
- (PBFeedActionBuilder*) setPosX:(Float32) value {
  resultPbfeedAction.hasPosX = YES;
  resultPbfeedAction.posX = value;
  return self;
}
- (PBFeedActionBuilder*) clearPosX {
  resultPbfeedAction.hasPosX = NO;
  resultPbfeedAction.posX = 0;
  return self;
}
- (BOOL) hasPosY {
  return resultPbfeedAction.hasPosY;
}
- (Float32) posY {
  return resultPbfeedAction.posY;
}
- (PBFeedActionBuilder*) setPosY:(Float32) value {
  resultPbfeedAction.hasPosY = YES;
  resultPbfeedAction.posY = value;
  return self;
}
- (PBFeedActionBuilder*) clearPosY {
  resultPbfeedAction.hasPosY = NO;
  resultPbfeedAction.posY = 0;
  return self;
}
- (BOOL) hasColorMode {
  return resultPbfeedAction.hasColorMode;
}
- (SInt32) colorMode {
  return resultPbfeedAction.colorMode;
}
- (PBFeedActionBuilder*) setColorMode:(SInt32) value {
  resultPbfeedAction.hasColorMode = YES;
  resultPbfeedAction.colorMode = value;
  return self;
}
- (PBFeedActionBuilder*) clearColorMode {
  resultPbfeedAction.hasColorMode = NO;
  resultPbfeedAction.colorMode = 0;
  return self;
}
- (BOOL) hasColor {
  return resultPbfeedAction.hasColor;
}
- (SInt32) color {
  return resultPbfeedAction.color;
}
- (PBFeedActionBuilder*) setColor:(SInt32) value {
  resultPbfeedAction.hasColor = YES;
  resultPbfeedAction.color = value;
  return self;
}
- (PBFeedActionBuilder*) clearColor {
  resultPbfeedAction.hasColor = NO;
  resultPbfeedAction.color = 0;
  return self;
}
- (BOOL) hasAngel {
  return resultPbfeedAction.hasAngel;
}
- (SInt32) angel {
  return resultPbfeedAction.angel;
}
- (PBFeedActionBuilder*) setAngel:(SInt32) value {
  resultPbfeedAction.hasAngel = YES;
  resultPbfeedAction.angel = value;
  return self;
}
- (PBFeedActionBuilder*) clearAngel {
  resultPbfeedAction.hasAngel = NO;
  resultPbfeedAction.angel = 0;
  return self;
}
- (BOOL) hasHasBg {
  return resultPbfeedAction.hasHasBg;
}
- (BOOL) hasBg {
  return resultPbfeedAction.hasBg;
}
- (PBFeedActionBuilder*) setHasBg:(BOOL) value {
  resultPbfeedAction.hasHasBg = YES;
  resultPbfeedAction.hasBg = value;
  return self;
}
- (PBFeedActionBuilder*) clearHasBg {
  resultPbfeedAction.hasHasBg = NO;
  resultPbfeedAction.hasBg = YES;
  return self;
}
- (BOOL) hasDate {
  return resultPbfeedAction.hasDate;
}
- (SInt32) date {
  return resultPbfeedAction.date;
}
- (PBFeedActionBuilder*) setDate:(SInt32) value {
  resultPbfeedAction.hasDate = YES;
  resultPbfeedAction.date = value;
  return self;
}
- (PBFeedActionBuilder*) clearDate {
  resultPbfeedAction.hasDate = NO;
  resultPbfeedAction.date = 0;
  return self;
}
- (BOOL) hasBStyle {
  return resultPbfeedAction.hasBStyle;
}
- (SInt32) bStyle {
  return resultPbfeedAction.bStyle;
}
- (PBFeedActionBuilder*) setBStyle:(SInt32) value {
  resultPbfeedAction.hasBStyle = YES;
  resultPbfeedAction.bStyle = value;
  return self;
}
- (PBFeedActionBuilder*) clearBStyle {
  resultPbfeedAction.hasBStyle = NO;
  resultPbfeedAction.bStyle = 0;
  return self;
}
@end

@interface PBMyNewFeed ()
@property (strong) NSString* feedId;
@property (strong) NSString* actionId;
@property SInt32 type;
@property SInt32 count;
@property SInt32 mDate;
@property BOOL isRead;
@property (strong) NSString* userId;
@property (strong) PBFeed* feed;
@property (strong) NSString* image;
@end

@implementation PBMyNewFeed

- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) _value_ {
  hasFeedId_ = !!_value_;
}
@synthesize feedId;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasMDate {
  return !!hasMDate_;
}
- (void) setHasMDate:(BOOL) _value_ {
  hasMDate_ = !!_value_;
}
@synthesize mDate;
- (BOOL) hasIsRead {
  return !!hasIsRead_;
}
- (void) setHasIsRead:(BOOL) _value_ {
  hasIsRead_ = !!_value_;
}
- (BOOL) isRead {
  return !!isRead_;
}
- (void) setIsRead:(BOOL) _value_ {
  isRead_ = !!_value_;
}
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFeed {
  return !!hasFeed_;
}
- (void) setHasFeed:(BOOL) _value_ {
  hasFeed_ = !!_value_;
}
@synthesize feed;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (instancetype) init {
  if ((self = [super init])) {
    self.feedId = @"";
    self.actionId = @"";
    self.type = 0;
    self.count = 0;
    self.mDate = 0;
    self.isRead = NO;
    self.userId = @"";
    self.feed = [PBFeed defaultInstance];
    self.image = @"";
  }
  return self;
}
static PBMyNewFeed* defaultPBMyNewFeedInstance = nil;
+ (void) initialize {
  if (self == [PBMyNewFeed class]) {
    defaultPBMyNewFeedInstance = [[PBMyNewFeed alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBMyNewFeedInstance;
}
- (instancetype) defaultInstance {
  return defaultPBMyNewFeedInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFeedId) {
    return NO;
  }
  if (self.hasFeed) {
    if (!self.feed.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFeedId) {
    [output writeString:1 value:self.feedId];
  }
  if (self.hasActionId) {
    [output writeString:2 value:self.actionId];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasCount) {
    [output writeInt32:4 value:self.count];
  }
  if (self.hasMDate) {
    [output writeInt32:5 value:self.mDate];
  }
  if (self.hasIsRead) {
    [output writeBool:6 value:self.isRead];
  }
  if (self.hasUserId) {
    [output writeString:7 value:self.userId];
  }
  if (self.hasFeed) {
    [output writeMessage:10 value:self.feed];
  }
  if (self.hasImage) {
    [output writeString:11 value:self.image];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFeedId) {
    size_ += computeStringSize(1, self.feedId);
  }
  if (self.hasActionId) {
    size_ += computeStringSize(2, self.actionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(3, self.type);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(4, self.count);
  }
  if (self.hasMDate) {
    size_ += computeInt32Size(5, self.mDate);
  }
  if (self.hasIsRead) {
    size_ += computeBoolSize(6, self.isRead);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(7, self.userId);
  }
  if (self.hasFeed) {
    size_ += computeMessageSize(10, self.feed);
  }
  if (self.hasImage) {
    size_ += computeStringSize(11, self.image);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBMyNewFeed*) parseFromData:(NSData*) data {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromData:data] build];
}
+ (PBMyNewFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromInputStream:input] build];
}
+ (PBMyNewFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBMyNewFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeed*)[[[PBMyNewFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeedBuilder*) builder {
  return [[PBMyNewFeedBuilder alloc] init];
}
+ (PBMyNewFeedBuilder*) builderWithPrototype:(PBMyNewFeed*) prototype {
  return [[PBMyNewFeed builder] mergeFrom:prototype];
}
- (PBMyNewFeedBuilder*) builder {
  return [PBMyNewFeed builder];
}
- (PBMyNewFeedBuilder*) toBuilder {
  return [PBMyNewFeed builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFeedId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", self.feedId];
  }
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasMDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mDate", [NSNumber numberWithInteger:self.mDate]];
  }
  if (self.hasIsRead) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRead", [NSNumber numberWithBool:self.isRead]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasFeed) {
    [output appendFormat:@"%@%@ {\n", indent, @"feed"];
    [self.feed writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBMyNewFeed class]]) {
    return NO;
  }
  PBMyNewFeed *otherMessage = other;
  return
      self.hasFeedId == otherMessage.hasFeedId &&
      (!self.hasFeedId || [self.feedId isEqual:otherMessage.feedId]) &&
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasMDate == otherMessage.hasMDate &&
      (!self.hasMDate || self.mDate == otherMessage.mDate) &&
      self.hasIsRead == otherMessage.hasIsRead &&
      (!self.hasIsRead || self.isRead == otherMessage.isRead) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasFeed == otherMessage.hasFeed &&
      (!self.hasFeed || [self.feed isEqual:otherMessage.feed]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFeedId) {
    hashCode = hashCode * 31 + [self.feedId hash];
  }
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasMDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mDate] hash];
  }
  if (self.hasIsRead) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRead] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasFeed) {
    hashCode = hashCode * 31 + [self.feed hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBMyNewFeedBuilder()
@property (strong) PBMyNewFeed* resultPbmyNewFeed;
@end

@implementation PBMyNewFeedBuilder
@synthesize resultPbmyNewFeed;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbmyNewFeed = [[PBMyNewFeed alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbmyNewFeed;
}
- (PBMyNewFeedBuilder*) clear {
  self.resultPbmyNewFeed = [[PBMyNewFeed alloc] init];
  return self;
}
- (PBMyNewFeedBuilder*) clone {
  return [PBMyNewFeed builderWithPrototype:resultPbmyNewFeed];
}
- (PBMyNewFeed*) defaultInstance {
  return [PBMyNewFeed defaultInstance];
}
- (PBMyNewFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMyNewFeed*) buildPartial {
  PBMyNewFeed* returnMe = resultPbmyNewFeed;
  self.resultPbmyNewFeed = nil;
  return returnMe;
}
- (PBMyNewFeedBuilder*) mergeFrom:(PBMyNewFeed*) other {
  if (other == [PBMyNewFeed defaultInstance]) {
    return self;
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasMDate) {
    [self setMDate:other.mDate];
  }
  if (other.hasIsRead) {
    [self setIsRead:other.isRead];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFeed) {
    [self mergeFeed:other.feed];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMyNewFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMyNewFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFeedId:[input readString]];
        break;
      }
      case 18: {
        [self setActionId:[input readString]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 32: {
        [self setCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setMDate:[input readInt32]];
        break;
      }
      case 48: {
        [self setIsRead:[input readBool]];
        break;
      }
      case 58: {
        [self setUserId:[input readString]];
        break;
      }
      case 82: {
        PBFeedBuilder* subBuilder = [PBFeed builder];
        if (self.hasFeed) {
          [subBuilder mergeFrom:self.feed];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeed:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setImage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFeedId {
  return resultPbmyNewFeed.hasFeedId;
}
- (NSString*) feedId {
  return resultPbmyNewFeed.feedId;
}
- (PBMyNewFeedBuilder*) setFeedId:(NSString*) value {
  resultPbmyNewFeed.hasFeedId = YES;
  resultPbmyNewFeed.feedId = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearFeedId {
  resultPbmyNewFeed.hasFeedId = NO;
  resultPbmyNewFeed.feedId = @"";
  return self;
}
- (BOOL) hasActionId {
  return resultPbmyNewFeed.hasActionId;
}
- (NSString*) actionId {
  return resultPbmyNewFeed.actionId;
}
- (PBMyNewFeedBuilder*) setActionId:(NSString*) value {
  resultPbmyNewFeed.hasActionId = YES;
  resultPbmyNewFeed.actionId = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearActionId {
  resultPbmyNewFeed.hasActionId = NO;
  resultPbmyNewFeed.actionId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbmyNewFeed.hasType;
}
- (SInt32) type {
  return resultPbmyNewFeed.type;
}
- (PBMyNewFeedBuilder*) setType:(SInt32) value {
  resultPbmyNewFeed.hasType = YES;
  resultPbmyNewFeed.type = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearType {
  resultPbmyNewFeed.hasType = NO;
  resultPbmyNewFeed.type = 0;
  return self;
}
- (BOOL) hasCount {
  return resultPbmyNewFeed.hasCount;
}
- (SInt32) count {
  return resultPbmyNewFeed.count;
}
- (PBMyNewFeedBuilder*) setCount:(SInt32) value {
  resultPbmyNewFeed.hasCount = YES;
  resultPbmyNewFeed.count = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearCount {
  resultPbmyNewFeed.hasCount = NO;
  resultPbmyNewFeed.count = 0;
  return self;
}
- (BOOL) hasMDate {
  return resultPbmyNewFeed.hasMDate;
}
- (SInt32) mDate {
  return resultPbmyNewFeed.mDate;
}
- (PBMyNewFeedBuilder*) setMDate:(SInt32) value {
  resultPbmyNewFeed.hasMDate = YES;
  resultPbmyNewFeed.mDate = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearMDate {
  resultPbmyNewFeed.hasMDate = NO;
  resultPbmyNewFeed.mDate = 0;
  return self;
}
- (BOOL) hasIsRead {
  return resultPbmyNewFeed.hasIsRead;
}
- (BOOL) isRead {
  return resultPbmyNewFeed.isRead;
}
- (PBMyNewFeedBuilder*) setIsRead:(BOOL) value {
  resultPbmyNewFeed.hasIsRead = YES;
  resultPbmyNewFeed.isRead = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearIsRead {
  resultPbmyNewFeed.hasIsRead = NO;
  resultPbmyNewFeed.isRead = NO;
  return self;
}
- (BOOL) hasUserId {
  return resultPbmyNewFeed.hasUserId;
}
- (NSString*) userId {
  return resultPbmyNewFeed.userId;
}
- (PBMyNewFeedBuilder*) setUserId:(NSString*) value {
  resultPbmyNewFeed.hasUserId = YES;
  resultPbmyNewFeed.userId = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearUserId {
  resultPbmyNewFeed.hasUserId = NO;
  resultPbmyNewFeed.userId = @"";
  return self;
}
- (BOOL) hasFeed {
  return resultPbmyNewFeed.hasFeed;
}
- (PBFeed*) feed {
  return resultPbmyNewFeed.feed;
}
- (PBMyNewFeedBuilder*) setFeed:(PBFeed*) value {
  resultPbmyNewFeed.hasFeed = YES;
  resultPbmyNewFeed.feed = value;
  return self;
}
- (PBMyNewFeedBuilder*) setFeedBuilder:(PBFeedBuilder*) builderForValue {
  return [self setFeed:[builderForValue build]];
}
- (PBMyNewFeedBuilder*) mergeFeed:(PBFeed*) value {
  if (resultPbmyNewFeed.hasFeed &&
      resultPbmyNewFeed.feed != [PBFeed defaultInstance]) {
    resultPbmyNewFeed.feed =
      [[[PBFeed builderWithPrototype:resultPbmyNewFeed.feed] mergeFrom:value] buildPartial];
  } else {
    resultPbmyNewFeed.feed = value;
  }
  resultPbmyNewFeed.hasFeed = YES;
  return self;
}
- (PBMyNewFeedBuilder*) clearFeed {
  resultPbmyNewFeed.hasFeed = NO;
  resultPbmyNewFeed.feed = [PBFeed defaultInstance];
  return self;
}
- (BOOL) hasImage {
  return resultPbmyNewFeed.hasImage;
}
- (NSString*) image {
  return resultPbmyNewFeed.image;
}
- (PBMyNewFeedBuilder*) setImage:(NSString*) value {
  resultPbmyNewFeed.hasImage = YES;
  resultPbmyNewFeed.image = value;
  return self;
}
- (PBMyNewFeedBuilder*) clearImage {
  resultPbmyNewFeed.hasImage = NO;
  resultPbmyNewFeed.image = @"";
  return self;
}
@end

@interface PBMyNewFeedList ()
@property (strong) NSMutableArray * myFeedsArray;
@end

@implementation PBMyNewFeedList

@synthesize myFeedsArray;
@dynamic myFeeds;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBMyNewFeedList* defaultPBMyNewFeedListInstance = nil;
+ (void) initialize {
  if (self == [PBMyNewFeedList class]) {
    defaultPBMyNewFeedListInstance = [[PBMyNewFeedList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBMyNewFeedListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBMyNewFeedListInstance;
}
- (NSArray *)myFeeds {
  return myFeedsArray;
}
- (PBMyNewFeed*)myFeedsAtIndex:(NSUInteger)index {
  return [myFeedsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitmyFeeds = YES;
   [self.myFeeds enumerateObjectsUsingBlock:^(PBMyNewFeed *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmyFeeds = NO;
      *stop = YES;
    }
  }];
  if (!isInitmyFeeds) return isInitmyFeeds;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.myFeedsArray enumerateObjectsUsingBlock:^(PBMyNewFeed *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.myFeedsArray enumerateObjectsUsingBlock:^(PBMyNewFeed *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBMyNewFeedList*) parseFromData:(NSData*) data {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromData:data] build];
}
+ (PBMyNewFeedList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeedList*) parseFromInputStream:(NSInputStream*) input {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromInputStream:input] build];
}
+ (PBMyNewFeedList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeedList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromCodedInputStream:input] build];
}
+ (PBMyNewFeedList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMyNewFeedList*)[[[PBMyNewFeedList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMyNewFeedListBuilder*) builder {
  return [[PBMyNewFeedListBuilder alloc] init];
}
+ (PBMyNewFeedListBuilder*) builderWithPrototype:(PBMyNewFeedList*) prototype {
  return [[PBMyNewFeedList builder] mergeFrom:prototype];
}
- (PBMyNewFeedListBuilder*) builder {
  return [PBMyNewFeedList builder];
}
- (PBMyNewFeedListBuilder*) toBuilder {
  return [PBMyNewFeedList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.myFeedsArray enumerateObjectsUsingBlock:^(PBMyNewFeed *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"myFeeds"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBMyNewFeedList class]]) {
    return NO;
  }
  PBMyNewFeedList *otherMessage = other;
  return
      [self.myFeedsArray isEqualToArray:otherMessage.myFeedsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.myFeedsArray enumerateObjectsUsingBlock:^(PBMyNewFeed *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBMyNewFeedListBuilder()
@property (strong) PBMyNewFeedList* resultPbmyNewFeedList;
@end

@implementation PBMyNewFeedListBuilder
@synthesize resultPbmyNewFeedList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbmyNewFeedList = [[PBMyNewFeedList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbmyNewFeedList;
}
- (PBMyNewFeedListBuilder*) clear {
  self.resultPbmyNewFeedList = [[PBMyNewFeedList alloc] init];
  return self;
}
- (PBMyNewFeedListBuilder*) clone {
  return [PBMyNewFeedList builderWithPrototype:resultPbmyNewFeedList];
}
- (PBMyNewFeedList*) defaultInstance {
  return [PBMyNewFeedList defaultInstance];
}
- (PBMyNewFeedList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMyNewFeedList*) buildPartial {
  PBMyNewFeedList* returnMe = resultPbmyNewFeedList;
  self.resultPbmyNewFeedList = nil;
  return returnMe;
}
- (PBMyNewFeedListBuilder*) mergeFrom:(PBMyNewFeedList*) other {
  if (other == [PBMyNewFeedList defaultInstance]) {
    return self;
  }
  if (other.myFeedsArray.count > 0) {
    if (resultPbmyNewFeedList.myFeedsArray == nil) {
      resultPbmyNewFeedList.myFeedsArray = [[NSMutableArray alloc] initWithArray:other.myFeedsArray];
    } else {
      [resultPbmyNewFeedList.myFeedsArray addObjectsFromArray:other.myFeedsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMyNewFeedListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMyNewFeedListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBMyNewFeedBuilder* subBuilder = [PBMyNewFeed builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMyFeeds:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)myFeeds {
  return resultPbmyNewFeedList.myFeedsArray;
}
- (PBMyNewFeed*)myFeedsAtIndex:(NSUInteger)index {
  return [resultPbmyNewFeedList myFeedsAtIndex:index];
}
- (PBMyNewFeedListBuilder *)addMyFeeds:(PBMyNewFeed*)value {
  if (resultPbmyNewFeedList.myFeedsArray == nil) {
    resultPbmyNewFeedList.myFeedsArray = [[NSMutableArray alloc]init];
  }
  [resultPbmyNewFeedList.myFeedsArray addObject:value];
  return self;
}
- (PBMyNewFeedListBuilder *)setMyFeedsArray:(NSArray *)array {
  resultPbmyNewFeedList.myFeedsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBMyNewFeedListBuilder *)clearMyFeeds {
  resultPbmyNewFeedList.myFeedsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
