// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"
// @@protoc_insertion_point(imports)

@implementation UserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL FriendAddSourceTypeIsValidValue(FriendAddSourceType value) {
  switch (value) {
    case FriendAddSourceTypeAddBySearch:
    case FriendAddSourceTypeAddByScanQrcode:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFriendAddSourceType(FriendAddSourceType value) {
  switch (value) {
    case FriendAddSourceTypeAddBySearch:
      return @"FriendAddSourceTypeAddBySearch";
    case FriendAddSourceTypeAddByScanQrcode:
      return @"FriendAddSourceTypeAddByScanQrcode";
    default:
      return nil;
  }
}

BOOL FriendAddConfigTypeIsValidValue(FriendAddConfigType value) {
  switch (value) {
    case FriendAddConfigTypeRequireAccept:
    case FriendAddConfigTypeAcceptAll:
    case FriendAddConfigTypeDisallowAddMe:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFriendAddConfigType(FriendAddConfigType value) {
  switch (value) {
    case FriendAddConfigTypeRequireAccept:
      return @"FriendAddConfigTypeRequireAccept";
    case FriendAddConfigTypeAcceptAll:
      return @"FriendAddConfigTypeAcceptAll";
    case FriendAddConfigTypeDisallowAddMe:
      return @"FriendAddConfigTypeDisallowAddMe";
    default:
      return nil;
  }
}

BOOL FriendRequestDirectionIsValidValue(FriendRequestDirection value) {
  switch (value) {
    case FriendRequestDirectionReqDirectionSender:
    case FriendRequestDirectionReqDirectionReceiver:
    case FriendRequestDirectionReqDirectionNone:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFriendRequestDirection(FriendRequestDirection value) {
  switch (value) {
    case FriendRequestDirectionReqDirectionSender:
      return @"FriendRequestDirectionReqDirectionSender";
    case FriendRequestDirectionReqDirectionReceiver:
      return @"FriendRequestDirectionReqDirectionReceiver";
    case FriendRequestDirectionReqDirectionNone:
      return @"FriendRequestDirectionReqDirectionNone";
    default:
      return nil;
  }
}

BOOL FriendAddStatusTypeIsValidValue(FriendAddStatusType value) {
  switch (value) {
    case FriendAddStatusTypeReqWaitAccept:
    case FriendAddStatusTypeReqAccepted:
    case FriendAddStatusTypeReqRejected:
    case FriendAddStatusTypeReqStatusNone:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFriendAddStatusType(FriendAddStatusType value) {
  switch (value) {
    case FriendAddStatusTypeReqWaitAccept:
      return @"FriendAddStatusTypeReqWaitAccept";
    case FriendAddStatusTypeReqAccepted:
      return @"FriendAddStatusTypeReqAccepted";
    case FriendAddStatusTypeReqRejected:
      return @"FriendAddStatusTypeReqRejected";
    case FriendAddStatusTypeReqStatusNone:
      return @"FriendAddStatusTypeReqStatusNone";
    default:
      return nil;
  }
}

BOOL PBLoginTypeIsValidValue(PBLoginType value) {
  switch (value) {
    case PBLoginTypeLoginXiaoji:
    case PBLoginTypeLoginEmail:
    case PBLoginTypeLoginMobile:
    case PBLoginTypeLoginQq:
    case PBLoginTypeLoginSina:
    case PBLoginTypeLoginWeixin:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBLoginType(PBLoginType value) {
  switch (value) {
    case PBLoginTypeLoginXiaoji:
      return @"PBLoginTypeLoginXiaoji";
    case PBLoginTypeLoginEmail:
      return @"PBLoginTypeLoginEmail";
    case PBLoginTypeLoginMobile:
      return @"PBLoginTypeLoginMobile";
    case PBLoginTypeLoginQq:
      return @"PBLoginTypeLoginQq";
    case PBLoginTypeLoginSina:
      return @"PBLoginTypeLoginSina";
    case PBLoginTypeLoginWeixin:
      return @"PBLoginTypeLoginWeixin";
    default:
      return nil;
  }
}

BOOL PBRegisterTypeIsValidValue(PBRegisterType value) {
  switch (value) {
    case PBRegisterTypeRegXiaoji:
    case PBRegisterTypeRegEmail:
    case PBRegisterTypeRegMobile:
    case PBRegisterTypeRegQq:
    case PBRegisterTypeRegSina:
    case PBRegisterTypeRegWeixin:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBRegisterType(PBRegisterType value) {
  switch (value) {
    case PBRegisterTypeRegXiaoji:
      return @"PBRegisterTypeRegXiaoji";
    case PBRegisterTypeRegEmail:
      return @"PBRegisterTypeRegEmail";
    case PBRegisterTypeRegMobile:
      return @"PBRegisterTypeRegMobile";
    case PBRegisterTypeRegQq:
      return @"PBRegisterTypeRegQq";
    case PBRegisterTypeRegSina:
      return @"PBRegisterTypeRegSina";
    case PBRegisterTypeRegWeixin:
      return @"PBRegisterTypeRegWeixin";
    default:
      return nil;
  }
}

BOOL PBTagColorIsValidValue(PBTagColor value) {
  switch (value) {
    case PBTagColorSystem:
    case PBTagColorCustom:
    case PBTagColorMyself:
    case PBTagColorHot:
    case PBTagColorRecent:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTagColor(PBTagColor value) {
  switch (value) {
    case PBTagColorSystem:
      return @"PBTagColorSystem";
    case PBTagColorCustom:
      return @"PBTagColorCustom";
    case PBTagColorMyself:
      return @"PBTagColorMyself";
    case PBTagColorHot:
      return @"PBTagColorHot";
    case PBTagColorRecent:
      return @"PBTagColorRecent";
    default:
      return nil;
  }
}

BOOL PBInviteCodeStatusIsValidValue(PBInviteCodeStatus value) {
  switch (value) {
    case PBInviteCodeStatusCodeStatusReady:
    case PBInviteCodeStatusCodeStatusSent:
    case PBInviteCodeStatusCodeStatusUsed:
    case PBInviteCodeStatusCodeStatusInvalid:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBInviteCodeStatus(PBInviteCodeStatus value) {
  switch (value) {
    case PBInviteCodeStatusCodeStatusReady:
      return @"PBInviteCodeStatusCodeStatusReady";
    case PBInviteCodeStatusCodeStatusSent:
      return @"PBInviteCodeStatusCodeStatusSent";
    case PBInviteCodeStatusCodeStatusUsed:
      return @"PBInviteCodeStatusCodeStatusUsed";
    case PBInviteCodeStatusCodeStatusInvalid:
      return @"PBInviteCodeStatusCodeStatusInvalid";
    default:
      return nil;
  }
}

BOOL PBChatSourceIsValidValue(PBChatSource value) {
  switch (value) {
    case PBChatSourceFromWechat:
    case PBChatSourceFromApp:
    case PBChatSourceFromWeb:
    case PBChatSourceFromMobileWeb:
    case PBChatSourceFromAgent:
    case PBChatSourceFromAgentAuto:
    case PBChatSourceFromSystem:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBChatSource(PBChatSource value) {
  switch (value) {
    case PBChatSourceFromWechat:
      return @"PBChatSourceFromWechat";
    case PBChatSourceFromApp:
      return @"PBChatSourceFromApp";
    case PBChatSourceFromWeb:
      return @"PBChatSourceFromWeb";
    case PBChatSourceFromMobileWeb:
      return @"PBChatSourceFromMobileWeb";
    case PBChatSourceFromAgent:
      return @"PBChatSourceFromAgent";
    case PBChatSourceFromAgentAuto:
      return @"PBChatSourceFromAgentAuto";
    case PBChatSourceFromSystem:
      return @"PBChatSourceFromSystem";
    default:
      return nil;
  }
}

BOOL PBChatTypeIsValidValue(PBChatType value) {
  switch (value) {
    case PBChatTypeTextChat:
    case PBChatTypePictureChat:
    case PBChatTypeVoiceChat:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBChatType(PBChatType value) {
  switch (value) {
    case PBChatTypeTextChat:
      return @"PBChatTypeTextChat";
    case PBChatTypePictureChat:
      return @"PBChatTypePictureChat";
    case PBChatTypeVoiceChat:
      return @"PBChatTypeVoiceChat";
    default:
      return nil;
  }
}

BOOL PBChatStatusIsValidValue(PBChatStatus value) {
  switch (value) {
    case PBChatStatusMessageSending:
    case PBChatStatusMessageSent:
    case PBChatStatusMessageFailure:
    case PBChatStatusMessageDeleted:
    case PBChatStatusMessageCancel:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBChatStatus(PBChatStatus value) {
  switch (value) {
    case PBChatStatusMessageSending:
      return @"PBChatStatusMessageSending";
    case PBChatStatusMessageSent:
      return @"PBChatStatusMessageSent";
    case PBChatStatusMessageFailure:
      return @"PBChatStatusMessageFailure";
    case PBChatStatusMessageDeleted:
      return @"PBChatStatusMessageDeleted";
    case PBChatStatusMessageCancel:
      return @"PBChatStatusMessageCancel";
    default:
      return nil;
  }
}

BOOL PBAgentStatusIsValidValue(PBAgentStatus value) {
  switch (value) {
    case PBAgentStatusAgentOffline:
    case PBAgentStatusAgentOnline:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBAgentStatus(PBAgentStatus value) {
  switch (value) {
    case PBAgentStatusAgentOffline:
      return @"PBAgentStatusAgentOffline";
    case PBAgentStatusAgentOnline:
      return @"PBAgentStatusAgentOnline";
    default:
      return nil;
  }
}

@interface PBSNSUser ()
@property SInt32 type;
@property (strong) NSString* userId;
@property (strong) NSString* nick;
@property (strong) NSString* accessToken;
@property (strong) NSString* accessTokenSecret;
@property (strong) NSString* refreshToken;
@property SInt32 expiredTime;
@property (strong) NSString* qqOpenId;
@property (strong) NSString* credential;
@end

@implementation PBSNSUser

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNick {
  return !!hasNick_;
}
- (void) setHasNick:(BOOL) _value_ {
  hasNick_ = !!_value_;
}
@synthesize nick;
- (BOOL) hasAccessToken {
  return !!hasAccessToken_;
}
- (void) setHasAccessToken:(BOOL) _value_ {
  hasAccessToken_ = !!_value_;
}
@synthesize accessToken;
- (BOOL) hasAccessTokenSecret {
  return !!hasAccessTokenSecret_;
}
- (void) setHasAccessTokenSecret:(BOOL) _value_ {
  hasAccessTokenSecret_ = !!_value_;
}
@synthesize accessTokenSecret;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) _value_ {
  hasRefreshToken_ = !!_value_;
}
@synthesize refreshToken;
- (BOOL) hasExpiredTime {
  return !!hasExpiredTime_;
}
- (void) setHasExpiredTime:(BOOL) _value_ {
  hasExpiredTime_ = !!_value_;
}
@synthesize expiredTime;
- (BOOL) hasQqOpenId {
  return !!hasQqOpenId_;
}
- (void) setHasQqOpenId:(BOOL) _value_ {
  hasQqOpenId_ = !!_value_;
}
@synthesize qqOpenId;
- (BOOL) hasCredential {
  return !!hasCredential_;
}
- (void) setHasCredential:(BOOL) _value_ {
  hasCredential_ = !!_value_;
}
@synthesize credential;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.userId = @"";
    self.nick = @"";
    self.accessToken = @"";
    self.accessTokenSecret = @"";
    self.refreshToken = @"";
    self.expiredTime = 0;
    self.qqOpenId = @"";
    self.credential = @"";
  }
  return self;
}
static PBSNSUser* defaultPBSNSUserInstance = nil;
+ (void) initialize {
  if (self == [PBSNSUser class]) {
    defaultPBSNSUserInstance = [[PBSNSUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasNick) {
    [output writeString:3 value:self.nick];
  }
  if (self.hasAccessToken) {
    [output writeString:4 value:self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output writeString:5 value:self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output writeString:6 value:self.refreshToken];
  }
  if (self.hasExpiredTime) {
    [output writeInt32:7 value:self.expiredTime];
  }
  if (self.hasQqOpenId) {
    [output writeString:8 value:self.qqOpenId];
  }
  if (self.hasCredential) {
    [output writeString:20 value:self.credential];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasNick) {
    size_ += computeStringSize(3, self.nick);
  }
  if (self.hasAccessToken) {
    size_ += computeStringSize(4, self.accessToken);
  }
  if (self.hasAccessTokenSecret) {
    size_ += computeStringSize(5, self.accessTokenSecret);
  }
  if (self.hasRefreshToken) {
    size_ += computeStringSize(6, self.refreshToken);
  }
  if (self.hasExpiredTime) {
    size_ += computeInt32Size(7, self.expiredTime);
  }
  if (self.hasQqOpenId) {
    size_ += computeStringSize(8, self.qqOpenId);
  }
  if (self.hasCredential) {
    size_ += computeStringSize(20, self.credential);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSNSUser*) parseFromData:(NSData*) data {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data] build];
}
+ (PBSNSUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUserBuilder*) builder {
  return [[PBSNSUserBuilder alloc] init];
}
+ (PBSNSUserBuilder*) builderWithPrototype:(PBSNSUser*) prototype {
  return [[PBSNSUser builder] mergeFrom:prototype];
}
- (PBSNSUserBuilder*) builder {
  return [PBSNSUser builder];
}
- (PBSNSUserBuilder*) toBuilder {
  return [PBSNSUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNick) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nick", self.nick];
  }
  if (self.hasAccessToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accessToken", self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accessTokenSecret", self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refreshToken", self.refreshToken];
  }
  if (self.hasExpiredTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredTime", [NSNumber numberWithInteger:self.expiredTime]];
  }
  if (self.hasQqOpenId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qqOpenId", self.qqOpenId];
  }
  if (self.hasCredential) {
    [output appendFormat:@"%@%@: %@\n", indent, @"credential", self.credential];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSNSUser class]]) {
    return NO;
  }
  PBSNSUser *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNick == otherMessage.hasNick &&
      (!self.hasNick || [self.nick isEqual:otherMessage.nick]) &&
      self.hasAccessToken == otherMessage.hasAccessToken &&
      (!self.hasAccessToken || [self.accessToken isEqual:otherMessage.accessToken]) &&
      self.hasAccessTokenSecret == otherMessage.hasAccessTokenSecret &&
      (!self.hasAccessTokenSecret || [self.accessTokenSecret isEqual:otherMessage.accessTokenSecret]) &&
      self.hasRefreshToken == otherMessage.hasRefreshToken &&
      (!self.hasRefreshToken || [self.refreshToken isEqual:otherMessage.refreshToken]) &&
      self.hasExpiredTime == otherMessage.hasExpiredTime &&
      (!self.hasExpiredTime || self.expiredTime == otherMessage.expiredTime) &&
      self.hasQqOpenId == otherMessage.hasQqOpenId &&
      (!self.hasQqOpenId || [self.qqOpenId isEqual:otherMessage.qqOpenId]) &&
      self.hasCredential == otherMessage.hasCredential &&
      (!self.hasCredential || [self.credential isEqual:otherMessage.credential]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNick) {
    hashCode = hashCode * 31 + [self.nick hash];
  }
  if (self.hasAccessToken) {
    hashCode = hashCode * 31 + [self.accessToken hash];
  }
  if (self.hasAccessTokenSecret) {
    hashCode = hashCode * 31 + [self.accessTokenSecret hash];
  }
  if (self.hasRefreshToken) {
    hashCode = hashCode * 31 + [self.refreshToken hash];
  }
  if (self.hasExpiredTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expiredTime] hash];
  }
  if (self.hasQqOpenId) {
    hashCode = hashCode * 31 + [self.qqOpenId hash];
  }
  if (self.hasCredential) {
    hashCode = hashCode * 31 + [self.credential hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSNSUserBuilder()
@property (strong) PBSNSUser* resultPbsnsuser;
@end

@implementation PBSNSUserBuilder
@synthesize resultPbsnsuser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsnsuser = [[PBSNSUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsnsuser;
}
- (PBSNSUserBuilder*) clear {
  self.resultPbsnsuser = [[PBSNSUser alloc] init];
  return self;
}
- (PBSNSUserBuilder*) clone {
  return [PBSNSUser builderWithPrototype:resultPbsnsuser];
}
- (PBSNSUser*) defaultInstance {
  return [PBSNSUser defaultInstance];
}
- (PBSNSUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSNSUser*) buildPartial {
  PBSNSUser* returnMe = resultPbsnsuser;
  self.resultPbsnsuser = nil;
  return returnMe;
}
- (PBSNSUserBuilder*) mergeFrom:(PBSNSUser*) other {
  if (other == [PBSNSUser defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNick) {
    [self setNick:other.nick];
  }
  if (other.hasAccessToken) {
    [self setAccessToken:other.accessToken];
  }
  if (other.hasAccessTokenSecret) {
    [self setAccessTokenSecret:other.accessTokenSecret];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  if (other.hasExpiredTime) {
    [self setExpiredTime:other.expiredTime];
  }
  if (other.hasQqOpenId) {
    [self setQqOpenId:other.qqOpenId];
  }
  if (other.hasCredential) {
    [self setCredential:other.credential];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSNSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSNSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setNick:[input readString]];
        break;
      }
      case 34: {
        [self setAccessToken:[input readString]];
        break;
      }
      case 42: {
        [self setAccessTokenSecret:[input readString]];
        break;
      }
      case 50: {
        [self setRefreshToken:[input readString]];
        break;
      }
      case 56: {
        [self setExpiredTime:[input readInt32]];
        break;
      }
      case 66: {
        [self setQqOpenId:[input readString]];
        break;
      }
      case 162: {
        [self setCredential:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbsnsuser.hasType;
}
- (SInt32) type {
  return resultPbsnsuser.type;
}
- (PBSNSUserBuilder*) setType:(SInt32) value {
  resultPbsnsuser.hasType = YES;
  resultPbsnsuser.type = value;
  return self;
}
- (PBSNSUserBuilder*) clearType {
  resultPbsnsuser.hasType = NO;
  resultPbsnsuser.type = 0;
  return self;
}
- (BOOL) hasUserId {
  return resultPbsnsuser.hasUserId;
}
- (NSString*) userId {
  return resultPbsnsuser.userId;
}
- (PBSNSUserBuilder*) setUserId:(NSString*) value {
  resultPbsnsuser.hasUserId = YES;
  resultPbsnsuser.userId = value;
  return self;
}
- (PBSNSUserBuilder*) clearUserId {
  resultPbsnsuser.hasUserId = NO;
  resultPbsnsuser.userId = @"";
  return self;
}
- (BOOL) hasNick {
  return resultPbsnsuser.hasNick;
}
- (NSString*) nick {
  return resultPbsnsuser.nick;
}
- (PBSNSUserBuilder*) setNick:(NSString*) value {
  resultPbsnsuser.hasNick = YES;
  resultPbsnsuser.nick = value;
  return self;
}
- (PBSNSUserBuilder*) clearNick {
  resultPbsnsuser.hasNick = NO;
  resultPbsnsuser.nick = @"";
  return self;
}
- (BOOL) hasAccessToken {
  return resultPbsnsuser.hasAccessToken;
}
- (NSString*) accessToken {
  return resultPbsnsuser.accessToken;
}
- (PBSNSUserBuilder*) setAccessToken:(NSString*) value {
  resultPbsnsuser.hasAccessToken = YES;
  resultPbsnsuser.accessToken = value;
  return self;
}
- (PBSNSUserBuilder*) clearAccessToken {
  resultPbsnsuser.hasAccessToken = NO;
  resultPbsnsuser.accessToken = @"";
  return self;
}
- (BOOL) hasAccessTokenSecret {
  return resultPbsnsuser.hasAccessTokenSecret;
}
- (NSString*) accessTokenSecret {
  return resultPbsnsuser.accessTokenSecret;
}
- (PBSNSUserBuilder*) setAccessTokenSecret:(NSString*) value {
  resultPbsnsuser.hasAccessTokenSecret = YES;
  resultPbsnsuser.accessTokenSecret = value;
  return self;
}
- (PBSNSUserBuilder*) clearAccessTokenSecret {
  resultPbsnsuser.hasAccessTokenSecret = NO;
  resultPbsnsuser.accessTokenSecret = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return resultPbsnsuser.hasRefreshToken;
}
- (NSString*) refreshToken {
  return resultPbsnsuser.refreshToken;
}
- (PBSNSUserBuilder*) setRefreshToken:(NSString*) value {
  resultPbsnsuser.hasRefreshToken = YES;
  resultPbsnsuser.refreshToken = value;
  return self;
}
- (PBSNSUserBuilder*) clearRefreshToken {
  resultPbsnsuser.hasRefreshToken = NO;
  resultPbsnsuser.refreshToken = @"";
  return self;
}
- (BOOL) hasExpiredTime {
  return resultPbsnsuser.hasExpiredTime;
}
- (SInt32) expiredTime {
  return resultPbsnsuser.expiredTime;
}
- (PBSNSUserBuilder*) setExpiredTime:(SInt32) value {
  resultPbsnsuser.hasExpiredTime = YES;
  resultPbsnsuser.expiredTime = value;
  return self;
}
- (PBSNSUserBuilder*) clearExpiredTime {
  resultPbsnsuser.hasExpiredTime = NO;
  resultPbsnsuser.expiredTime = 0;
  return self;
}
- (BOOL) hasQqOpenId {
  return resultPbsnsuser.hasQqOpenId;
}
- (NSString*) qqOpenId {
  return resultPbsnsuser.qqOpenId;
}
- (PBSNSUserBuilder*) setQqOpenId:(NSString*) value {
  resultPbsnsuser.hasQqOpenId = YES;
  resultPbsnsuser.qqOpenId = value;
  return self;
}
- (PBSNSUserBuilder*) clearQqOpenId {
  resultPbsnsuser.hasQqOpenId = NO;
  resultPbsnsuser.qqOpenId = @"";
  return self;
}
- (BOOL) hasCredential {
  return resultPbsnsuser.hasCredential;
}
- (NSString*) credential {
  return resultPbsnsuser.credential;
}
- (PBSNSUserBuilder*) setCredential:(NSString*) value {
  resultPbsnsuser.hasCredential = YES;
  resultPbsnsuser.credential = value;
  return self;
}
- (PBSNSUserBuilder*) clearCredential {
  resultPbsnsuser.hasCredential = NO;
  resultPbsnsuser.credential = @"";
  return self;
}
@end

@interface PBUser ()
@property (strong) NSString* userId;
@property (strong) NSString* nick;
@property (strong) NSString* avatar;
@property BOOL gender;
@property (strong) NSMutableArray * snsUsersArray;
@property (strong) NSString* xiaojiNumber;
@property (strong) NSString* email;
@property (strong) NSString* password;
@property (strong) NSString* mobile;
@property (strong) NSString* qqOpenId;
@property (strong) NSString* sinaId;
@property (strong) NSString* weixinId;
@property (strong) NSString* birthday;
@property SInt32 zodiac;
@property (strong) NSString* bloodGroup;
@property SInt32 regDate;
@property SInt32 regFrom;
@property SInt32 visitDate;
@property SInt32 sDate;
@property (strong) NSString* avatarBg;
@property (strong) NSString* signature;
@property (strong) NSString* avatars;
@property (strong) NSString* bAvatars;
@property (strong) NSString* location;
@property (strong) NSString* countryCode;
@property (strong) NSString* language;
@property Float32 longitude;
@property Float32 latitude;
@property SInt32 level;
@property SInt64 experience;
@property (strong) PBDevice* currentDevice;
@property (strong) NSMutableArray * devicesArray;
@property SInt32 emailVerifyStatus;
@property (strong) NSString* emailVerifyCode;
@property SInt32 mobileVerifyStatus;
@property SInt32 addConfig;
@property (strong) NSMutableArray * tagsArray;
@property (strong) NSString* memo;
@property SInt32 addSource;
@property SInt32 addDate;
@property SInt32 addDir;
@property (strong) NSString* replyMemo;
@property SInt32 addStatus;
@property SInt32 bStyle;
@property SInt32 bSpeed;
@property BOOL isAgent;
@property (strong) NSString* agentAccount;
@property SInt32 agentStatus;
@end

@implementation PBUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNick {
  return !!hasNick_;
}
- (void) setHasNick:(BOOL) _value_ {
  hasNick_ = !!_value_;
}
@synthesize nick;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
@synthesize snsUsersArray;
@dynamic snsUsers;
- (BOOL) hasXiaojiNumber {
  return !!hasXiaojiNumber_;
}
- (void) setHasXiaojiNumber:(BOOL) _value_ {
  hasXiaojiNumber_ = !!_value_;
}
@synthesize xiaojiNumber;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) _value_ {
  hasMobile_ = !!_value_;
}
@synthesize mobile;
- (BOOL) hasQqOpenId {
  return !!hasQqOpenId_;
}
- (void) setHasQqOpenId:(BOOL) _value_ {
  hasQqOpenId_ = !!_value_;
}
@synthesize qqOpenId;
- (BOOL) hasSinaId {
  return !!hasSinaId_;
}
- (void) setHasSinaId:(BOOL) _value_ {
  hasSinaId_ = !!_value_;
}
@synthesize sinaId;
- (BOOL) hasWeixinId {
  return !!hasWeixinId_;
}
- (void) setHasWeixinId:(BOOL) _value_ {
  hasWeixinId_ = !!_value_;
}
@synthesize weixinId;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) _value_ {
  hasBirthday_ = !!_value_;
}
@synthesize birthday;
- (BOOL) hasZodiac {
  return !!hasZodiac_;
}
- (void) setHasZodiac:(BOOL) _value_ {
  hasZodiac_ = !!_value_;
}
@synthesize zodiac;
- (BOOL) hasBloodGroup {
  return !!hasBloodGroup_;
}
- (void) setHasBloodGroup:(BOOL) _value_ {
  hasBloodGroup_ = !!_value_;
}
@synthesize bloodGroup;
- (BOOL) hasRegDate {
  return !!hasRegDate_;
}
- (void) setHasRegDate:(BOOL) _value_ {
  hasRegDate_ = !!_value_;
}
@synthesize regDate;
- (BOOL) hasRegFrom {
  return !!hasRegFrom_;
}
- (void) setHasRegFrom:(BOOL) _value_ {
  hasRegFrom_ = !!_value_;
}
@synthesize regFrom;
- (BOOL) hasVisitDate {
  return !!hasVisitDate_;
}
- (void) setHasVisitDate:(BOOL) _value_ {
  hasVisitDate_ = !!_value_;
}
@synthesize visitDate;
- (BOOL) hasSDate {
  return !!hasSDate_;
}
- (void) setHasSDate:(BOOL) _value_ {
  hasSDate_ = !!_value_;
}
@synthesize sDate;
- (BOOL) hasAvatarBg {
  return !!hasAvatarBg_;
}
- (void) setHasAvatarBg:(BOOL) _value_ {
  hasAvatarBg_ = !!_value_;
}
@synthesize avatarBg;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) _value_ {
  hasSignature_ = !!_value_;
}
@synthesize signature;
- (BOOL) hasAvatars {
  return !!hasAvatars_;
}
- (void) setHasAvatars:(BOOL) _value_ {
  hasAvatars_ = !!_value_;
}
@synthesize avatars;
- (BOOL) hasBAvatars {
  return !!hasBAvatars_;
}
- (void) setHasBAvatars:(BOOL) _value_ {
  hasBAvatars_ = !!_value_;
}
@synthesize bAvatars;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) _value_ {
  hasCountryCode_ = !!_value_;
}
@synthesize countryCode;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) _value_ {
  hasExperience_ = !!_value_;
}
@synthesize experience;
- (BOOL) hasCurrentDevice {
  return !!hasCurrentDevice_;
}
- (void) setHasCurrentDevice:(BOOL) _value_ {
  hasCurrentDevice_ = !!_value_;
}
@synthesize currentDevice;
@synthesize devicesArray;
@dynamic devices;
- (BOOL) hasEmailVerifyStatus {
  return !!hasEmailVerifyStatus_;
}
- (void) setHasEmailVerifyStatus:(BOOL) _value_ {
  hasEmailVerifyStatus_ = !!_value_;
}
@synthesize emailVerifyStatus;
- (BOOL) hasEmailVerifyCode {
  return !!hasEmailVerifyCode_;
}
- (void) setHasEmailVerifyCode:(BOOL) _value_ {
  hasEmailVerifyCode_ = !!_value_;
}
@synthesize emailVerifyCode;
- (BOOL) hasMobileVerifyStatus {
  return !!hasMobileVerifyStatus_;
}
- (void) setHasMobileVerifyStatus:(BOOL) _value_ {
  hasMobileVerifyStatus_ = !!_value_;
}
@synthesize mobileVerifyStatus;
- (BOOL) hasAddConfig {
  return !!hasAddConfig_;
}
- (void) setHasAddConfig:(BOOL) _value_ {
  hasAddConfig_ = !!_value_;
}
@synthesize addConfig;
@synthesize tagsArray;
@dynamic tags;
- (BOOL) hasMemo {
  return !!hasMemo_;
}
- (void) setHasMemo:(BOOL) _value_ {
  hasMemo_ = !!_value_;
}
@synthesize memo;
- (BOOL) hasAddSource {
  return !!hasAddSource_;
}
- (void) setHasAddSource:(BOOL) _value_ {
  hasAddSource_ = !!_value_;
}
@synthesize addSource;
- (BOOL) hasAddDate {
  return !!hasAddDate_;
}
- (void) setHasAddDate:(BOOL) _value_ {
  hasAddDate_ = !!_value_;
}
@synthesize addDate;
- (BOOL) hasAddDir {
  return !!hasAddDir_;
}
- (void) setHasAddDir:(BOOL) _value_ {
  hasAddDir_ = !!_value_;
}
@synthesize addDir;
- (BOOL) hasReplyMemo {
  return !!hasReplyMemo_;
}
- (void) setHasReplyMemo:(BOOL) _value_ {
  hasReplyMemo_ = !!_value_;
}
@synthesize replyMemo;
- (BOOL) hasAddStatus {
  return !!hasAddStatus_;
}
- (void) setHasAddStatus:(BOOL) _value_ {
  hasAddStatus_ = !!_value_;
}
@synthesize addStatus;
- (BOOL) hasBStyle {
  return !!hasBStyle_;
}
- (void) setHasBStyle:(BOOL) _value_ {
  hasBStyle_ = !!_value_;
}
@synthesize bStyle;
- (BOOL) hasBSpeed {
  return !!hasBSpeed_;
}
- (void) setHasBSpeed:(BOOL) _value_ {
  hasBSpeed_ = !!_value_;
}
@synthesize bSpeed;
- (BOOL) hasIsAgent {
  return !!hasIsAgent_;
}
- (void) setHasIsAgent:(BOOL) _value_ {
  hasIsAgent_ = !!_value_;
}
- (BOOL) isAgent {
  return !!isAgent_;
}
- (void) setIsAgent:(BOOL) _value_ {
  isAgent_ = !!_value_;
}
- (BOOL) hasAgentAccount {
  return !!hasAgentAccount_;
}
- (void) setHasAgentAccount:(BOOL) _value_ {
  hasAgentAccount_ = !!_value_;
}
@synthesize agentAccount;
- (BOOL) hasAgentStatus {
  return !!hasAgentStatus_;
}
- (void) setHasAgentStatus:(BOOL) _value_ {
  hasAgentStatus_ = !!_value_;
}
@synthesize agentStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nick = @"";
    self.avatar = @"";
    self.gender = NO;
    self.xiaojiNumber = @"";
    self.email = @"";
    self.password = @"";
    self.mobile = @"";
    self.qqOpenId = @"";
    self.sinaId = @"";
    self.weixinId = @"";
    self.birthday = @"";
    self.zodiac = 0;
    self.bloodGroup = @"";
    self.regDate = 0;
    self.regFrom = 0;
    self.visitDate = 0;
    self.sDate = 0;
    self.avatarBg = @"";
    self.signature = @"";
    self.avatars = @"";
    self.bAvatars = @"";
    self.location = @"";
    self.countryCode = @"";
    self.language = @"";
    self.longitude = 0;
    self.latitude = 0;
    self.level = 0;
    self.experience = 0L;
    self.currentDevice = [PBDevice defaultInstance];
    self.emailVerifyStatus = 0;
    self.emailVerifyCode = @"";
    self.mobileVerifyStatus = 0;
    self.addConfig = 0;
    self.memo = @"";
    self.addSource = 0;
    self.addDate = 0;
    self.addDir = 0;
    self.replyMemo = @"";
    self.addStatus = 7;
    self.bStyle = 0;
    self.bSpeed = 0;
    self.isAgent = NO;
    self.agentAccount = @"";
    self.agentStatus = 0;
  }
  return self;
}
static PBUser* defaultPBUserInstance = nil;
+ (void) initialize {
  if (self == [PBUser class]) {
    defaultPBUserInstance = [[PBUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserInstance;
}
- (NSArray *)snsUsers {
  return snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [snsUsersArray objectAtIndex:index];
}
- (NSArray *)devices {
  return devicesArray;
}
- (PBDevice*)devicesAtIndex:(NSUInteger)index {
  return [devicesArray objectAtIndex:index];
}
- (NSArray *)tags {
  return tagsArray;
}
- (PBUserTag*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitsnsUsers = YES;
   [self.snsUsers enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsnsUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitsnsUsers) return isInitsnsUsers;
  if (self.hasCurrentDevice) {
    if (!self.currentDevice.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitdevices = YES;
   [self.devices enumerateObjectsUsingBlock:^(PBDevice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdevices = NO;
      *stop = YES;
    }
  }];
  if (!isInitdevices) return isInitdevices;
  __block BOOL isInittags = YES;
   [self.tags enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittags = NO;
      *stop = YES;
    }
  }];
  if (!isInittags) return isInittags;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNick) {
    [output writeString:2 value:self.nick];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasXiaojiNumber) {
    [output writeString:6 value:self.xiaojiNumber];
  }
  if (self.hasEmail) {
    [output writeString:7 value:self.email];
  }
  if (self.hasPassword) {
    [output writeString:8 value:self.password];
  }
  if (self.hasMobile) {
    [output writeString:9 value:self.mobile];
  }
  if (self.hasQqOpenId) {
    [output writeString:10 value:self.qqOpenId];
  }
  if (self.hasSinaId) {
    [output writeString:11 value:self.sinaId];
  }
  if (self.hasWeixinId) {
    [output writeString:12 value:self.weixinId];
  }
  if (self.hasBirthday) {
    [output writeString:31 value:self.birthday];
  }
  if (self.hasZodiac) {
    [output writeInt32:32 value:self.zodiac];
  }
  if (self.hasBloodGroup) {
    [output writeString:33 value:self.bloodGroup];
  }
  if (self.hasRegDate) {
    [output writeInt32:34 value:self.regDate];
  }
  if (self.hasRegFrom) {
    [output writeInt32:35 value:self.regFrom];
  }
  if (self.hasVisitDate) {
    [output writeInt32:36 value:self.visitDate];
  }
  if (self.hasSDate) {
    [output writeInt32:37 value:self.sDate];
  }
  if (self.hasAvatarBg) {
    [output writeString:41 value:self.avatarBg];
  }
  if (self.hasSignature) {
    [output writeString:42 value:self.signature];
  }
  if (self.hasAvatars) {
    [output writeString:43 value:self.avatars];
  }
  if (self.hasBAvatars) {
    [output writeString:44 value:self.bAvatars];
  }
  if (self.hasLocation) {
    [output writeString:51 value:self.location];
  }
  if (self.hasCountryCode) {
    [output writeString:52 value:self.countryCode];
  }
  if (self.hasLanguage) {
    [output writeString:53 value:self.language];
  }
  if (self.hasLongitude) {
    [output writeFloat:54 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeFloat:55 value:self.latitude];
  }
  if (self.hasLevel) {
    [output writeInt32:61 value:self.level];
  }
  if (self.hasExperience) {
    [output writeInt64:62 value:self.experience];
  }
  if (self.hasCurrentDevice) {
    [output writeMessage:71 value:self.currentDevice];
  }
  [self.devicesArray enumerateObjectsUsingBlock:^(PBDevice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:72 value:element];
  }];
  if (self.hasEmailVerifyStatus) {
    [output writeInt32:81 value:self.emailVerifyStatus];
  }
  if (self.hasEmailVerifyCode) {
    [output writeString:82 value:self.emailVerifyCode];
  }
  if (self.hasMobileVerifyStatus) {
    [output writeInt32:83 value:self.mobileVerifyStatus];
  }
  if (self.hasAddConfig) {
    [output writeInt32:91 value:self.addConfig];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:100 value:element];
  }];
  if (self.hasMemo) {
    [output writeString:101 value:self.memo];
  }
  if (self.hasAddSource) {
    [output writeInt32:102 value:self.addSource];
  }
  if (self.hasAddDate) {
    [output writeInt32:103 value:self.addDate];
  }
  if (self.hasAddDir) {
    [output writeInt32:104 value:self.addDir];
  }
  if (self.hasReplyMemo) {
    [output writeString:105 value:self.replyMemo];
  }
  if (self.hasAddStatus) {
    [output writeInt32:106 value:self.addStatus];
  }
  if (self.hasBStyle) {
    [output writeInt32:200 value:self.bStyle];
  }
  if (self.hasBSpeed) {
    [output writeInt32:201 value:self.bSpeed];
  }
  if (self.hasIsAgent) {
    [output writeBool:210 value:self.isAgent];
  }
  if (self.hasAgentAccount) {
    [output writeString:211 value:self.agentAccount];
  }
  if (self.hasAgentStatus) {
    [output writeInt32:212 value:self.agentStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasNick) {
    size_ += computeStringSize(2, self.nick);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(4, self.gender);
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasXiaojiNumber) {
    size_ += computeStringSize(6, self.xiaojiNumber);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(7, self.email);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(8, self.password);
  }
  if (self.hasMobile) {
    size_ += computeStringSize(9, self.mobile);
  }
  if (self.hasQqOpenId) {
    size_ += computeStringSize(10, self.qqOpenId);
  }
  if (self.hasSinaId) {
    size_ += computeStringSize(11, self.sinaId);
  }
  if (self.hasWeixinId) {
    size_ += computeStringSize(12, self.weixinId);
  }
  if (self.hasBirthday) {
    size_ += computeStringSize(31, self.birthday);
  }
  if (self.hasZodiac) {
    size_ += computeInt32Size(32, self.zodiac);
  }
  if (self.hasBloodGroup) {
    size_ += computeStringSize(33, self.bloodGroup);
  }
  if (self.hasRegDate) {
    size_ += computeInt32Size(34, self.regDate);
  }
  if (self.hasRegFrom) {
    size_ += computeInt32Size(35, self.regFrom);
  }
  if (self.hasVisitDate) {
    size_ += computeInt32Size(36, self.visitDate);
  }
  if (self.hasSDate) {
    size_ += computeInt32Size(37, self.sDate);
  }
  if (self.hasAvatarBg) {
    size_ += computeStringSize(41, self.avatarBg);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(42, self.signature);
  }
  if (self.hasAvatars) {
    size_ += computeStringSize(43, self.avatars);
  }
  if (self.hasBAvatars) {
    size_ += computeStringSize(44, self.bAvatars);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(51, self.location);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(52, self.countryCode);
  }
  if (self.hasLanguage) {
    size_ += computeStringSize(53, self.language);
  }
  if (self.hasLongitude) {
    size_ += computeFloatSize(54, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeFloatSize(55, self.latitude);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(61, self.level);
  }
  if (self.hasExperience) {
    size_ += computeInt64Size(62, self.experience);
  }
  if (self.hasCurrentDevice) {
    size_ += computeMessageSize(71, self.currentDevice);
  }
  [self.devicesArray enumerateObjectsUsingBlock:^(PBDevice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(72, element);
  }];
  if (self.hasEmailVerifyStatus) {
    size_ += computeInt32Size(81, self.emailVerifyStatus);
  }
  if (self.hasEmailVerifyCode) {
    size_ += computeStringSize(82, self.emailVerifyCode);
  }
  if (self.hasMobileVerifyStatus) {
    size_ += computeInt32Size(83, self.mobileVerifyStatus);
  }
  if (self.hasAddConfig) {
    size_ += computeInt32Size(91, self.addConfig);
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(100, element);
  }];
  if (self.hasMemo) {
    size_ += computeStringSize(101, self.memo);
  }
  if (self.hasAddSource) {
    size_ += computeInt32Size(102, self.addSource);
  }
  if (self.hasAddDate) {
    size_ += computeInt32Size(103, self.addDate);
  }
  if (self.hasAddDir) {
    size_ += computeInt32Size(104, self.addDir);
  }
  if (self.hasReplyMemo) {
    size_ += computeStringSize(105, self.replyMemo);
  }
  if (self.hasAddStatus) {
    size_ += computeInt32Size(106, self.addStatus);
  }
  if (self.hasBStyle) {
    size_ += computeInt32Size(200, self.bStyle);
  }
  if (self.hasBSpeed) {
    size_ += computeInt32Size(201, self.bSpeed);
  }
  if (self.hasIsAgent) {
    size_ += computeBoolSize(210, self.isAgent);
  }
  if (self.hasAgentAccount) {
    size_ += computeStringSize(211, self.agentAccount);
  }
  if (self.hasAgentStatus) {
    size_ += computeInt32Size(212, self.agentStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUser*) parseFromData:(NSData*) data {
  return (PBUser*)[[[PBUser builder] mergeFromData:data] build];
}
+ (PBUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUser*)[[[PBUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBUser*)[[[PBUser builder] mergeFromInputStream:input] build];
}
+ (PBUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUser*)[[[PBUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUser*)[[[PBUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUser*)[[[PBUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserBuilder*) builder {
  return [[PBUserBuilder alloc] init];
}
+ (PBUserBuilder*) builderWithPrototype:(PBUser*) prototype {
  return [[PBUser builder] mergeFrom:prototype];
}
- (PBUserBuilder*) builder {
  return [PBUser builder];
}
- (PBUserBuilder*) toBuilder {
  return [PBUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNick) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nick", self.nick];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"snsUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasXiaojiNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xiaojiNumber", self.xiaojiNumber];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobile", self.mobile];
  }
  if (self.hasQqOpenId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qqOpenId", self.qqOpenId];
  }
  if (self.hasSinaId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sinaId", self.sinaId];
  }
  if (self.hasWeixinId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weixinId", self.weixinId];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthday", self.birthday];
  }
  if (self.hasZodiac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zodiac", [NSNumber numberWithInteger:self.zodiac]];
  }
  if (self.hasBloodGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bloodGroup", self.bloodGroup];
  }
  if (self.hasRegDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regDate", [NSNumber numberWithInteger:self.regDate]];
  }
  if (self.hasRegFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regFrom", [NSNumber numberWithInteger:self.regFrom]];
  }
  if (self.hasVisitDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"visitDate", [NSNumber numberWithInteger:self.visitDate]];
  }
  if (self.hasSDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sDate", [NSNumber numberWithInteger:self.sDate]];
  }
  if (self.hasAvatarBg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarBg", self.avatarBg];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasAvatars) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatars", self.avatars];
  }
  if (self.hasBAvatars) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bAvatars", self.bAvatars];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", self.language];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithFloat:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasExperience) {
    [output appendFormat:@"%@%@: %@\n", indent, @"experience", [NSNumber numberWithLongLong:self.experience]];
  }
  if (self.hasCurrentDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"currentDevice"];
    [self.currentDevice writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.devicesArray enumerateObjectsUsingBlock:^(PBDevice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"devices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasEmailVerifyStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"emailVerifyStatus", [NSNumber numberWithInteger:self.emailVerifyStatus]];
  }
  if (self.hasEmailVerifyCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"emailVerifyCode", self.emailVerifyCode];
  }
  if (self.hasMobileVerifyStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobileVerifyStatus", [NSNumber numberWithInteger:self.mobileVerifyStatus]];
  }
  if (self.hasAddConfig) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addConfig", [NSNumber numberWithInteger:self.addConfig]];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tags"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memo", self.memo];
  }
  if (self.hasAddSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addSource", [NSNumber numberWithInteger:self.addSource]];
  }
  if (self.hasAddDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addDate", [NSNumber numberWithInteger:self.addDate]];
  }
  if (self.hasAddDir) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addDir", [NSNumber numberWithInteger:self.addDir]];
  }
  if (self.hasReplyMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyMemo", self.replyMemo];
  }
  if (self.hasAddStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addStatus", [NSNumber numberWithInteger:self.addStatus]];
  }
  if (self.hasBStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bStyle", [NSNumber numberWithInteger:self.bStyle]];
  }
  if (self.hasBSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bSpeed", [NSNumber numberWithInteger:self.bSpeed]];
  }
  if (self.hasIsAgent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAgent", [NSNumber numberWithBool:self.isAgent]];
  }
  if (self.hasAgentAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"agentAccount", self.agentAccount];
  }
  if (self.hasAgentStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"agentStatus", [NSNumber numberWithInteger:self.agentStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUser class]]) {
    return NO;
  }
  PBUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNick == otherMessage.hasNick &&
      (!self.hasNick || [self.nick isEqual:otherMessage.nick]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      [self.snsUsersArray isEqualToArray:otherMessage.snsUsersArray] &&
      self.hasXiaojiNumber == otherMessage.hasXiaojiNumber &&
      (!self.hasXiaojiNumber || [self.xiaojiNumber isEqual:otherMessage.xiaojiNumber]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      self.hasQqOpenId == otherMessage.hasQqOpenId &&
      (!self.hasQqOpenId || [self.qqOpenId isEqual:otherMessage.qqOpenId]) &&
      self.hasSinaId == otherMessage.hasSinaId &&
      (!self.hasSinaId || [self.sinaId isEqual:otherMessage.sinaId]) &&
      self.hasWeixinId == otherMessage.hasWeixinId &&
      (!self.hasWeixinId || [self.weixinId isEqual:otherMessage.weixinId]) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || [self.birthday isEqual:otherMessage.birthday]) &&
      self.hasZodiac == otherMessage.hasZodiac &&
      (!self.hasZodiac || self.zodiac == otherMessage.zodiac) &&
      self.hasBloodGroup == otherMessage.hasBloodGroup &&
      (!self.hasBloodGroup || [self.bloodGroup isEqual:otherMessage.bloodGroup]) &&
      self.hasRegDate == otherMessage.hasRegDate &&
      (!self.hasRegDate || self.regDate == otherMessage.regDate) &&
      self.hasRegFrom == otherMessage.hasRegFrom &&
      (!self.hasRegFrom || self.regFrom == otherMessage.regFrom) &&
      self.hasVisitDate == otherMessage.hasVisitDate &&
      (!self.hasVisitDate || self.visitDate == otherMessage.visitDate) &&
      self.hasSDate == otherMessage.hasSDate &&
      (!self.hasSDate || self.sDate == otherMessage.sDate) &&
      self.hasAvatarBg == otherMessage.hasAvatarBg &&
      (!self.hasAvatarBg || [self.avatarBg isEqual:otherMessage.avatarBg]) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasAvatars == otherMessage.hasAvatars &&
      (!self.hasAvatars || [self.avatars isEqual:otherMessage.avatars]) &&
      self.hasBAvatars == otherMessage.hasBAvatars &&
      (!self.hasBAvatars || [self.bAvatars isEqual:otherMessage.bAvatars]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || [self.language isEqual:otherMessage.language]) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasExperience == otherMessage.hasExperience &&
      (!self.hasExperience || self.experience == otherMessage.experience) &&
      self.hasCurrentDevice == otherMessage.hasCurrentDevice &&
      (!self.hasCurrentDevice || [self.currentDevice isEqual:otherMessage.currentDevice]) &&
      [self.devicesArray isEqualToArray:otherMessage.devicesArray] &&
      self.hasEmailVerifyStatus == otherMessage.hasEmailVerifyStatus &&
      (!self.hasEmailVerifyStatus || self.emailVerifyStatus == otherMessage.emailVerifyStatus) &&
      self.hasEmailVerifyCode == otherMessage.hasEmailVerifyCode &&
      (!self.hasEmailVerifyCode || [self.emailVerifyCode isEqual:otherMessage.emailVerifyCode]) &&
      self.hasMobileVerifyStatus == otherMessage.hasMobileVerifyStatus &&
      (!self.hasMobileVerifyStatus || self.mobileVerifyStatus == otherMessage.mobileVerifyStatus) &&
      self.hasAddConfig == otherMessage.hasAddConfig &&
      (!self.hasAddConfig || self.addConfig == otherMessage.addConfig) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      self.hasMemo == otherMessage.hasMemo &&
      (!self.hasMemo || [self.memo isEqual:otherMessage.memo]) &&
      self.hasAddSource == otherMessage.hasAddSource &&
      (!self.hasAddSource || self.addSource == otherMessage.addSource) &&
      self.hasAddDate == otherMessage.hasAddDate &&
      (!self.hasAddDate || self.addDate == otherMessage.addDate) &&
      self.hasAddDir == otherMessage.hasAddDir &&
      (!self.hasAddDir || self.addDir == otherMessage.addDir) &&
      self.hasReplyMemo == otherMessage.hasReplyMemo &&
      (!self.hasReplyMemo || [self.replyMemo isEqual:otherMessage.replyMemo]) &&
      self.hasAddStatus == otherMessage.hasAddStatus &&
      (!self.hasAddStatus || self.addStatus == otherMessage.addStatus) &&
      self.hasBStyle == otherMessage.hasBStyle &&
      (!self.hasBStyle || self.bStyle == otherMessage.bStyle) &&
      self.hasBSpeed == otherMessage.hasBSpeed &&
      (!self.hasBSpeed || self.bSpeed == otherMessage.bSpeed) &&
      self.hasIsAgent == otherMessage.hasIsAgent &&
      (!self.hasIsAgent || self.isAgent == otherMessage.isAgent) &&
      self.hasAgentAccount == otherMessage.hasAgentAccount &&
      (!self.hasAgentAccount || [self.agentAccount isEqual:otherMessage.agentAccount]) &&
      self.hasAgentStatus == otherMessage.hasAgentStatus &&
      (!self.hasAgentStatus || self.agentStatus == otherMessage.agentStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNick) {
    hashCode = hashCode * 31 + [self.nick hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasXiaojiNumber) {
    hashCode = hashCode * 31 + [self.xiaojiNumber hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  if (self.hasQqOpenId) {
    hashCode = hashCode * 31 + [self.qqOpenId hash];
  }
  if (self.hasSinaId) {
    hashCode = hashCode * 31 + [self.sinaId hash];
  }
  if (self.hasWeixinId) {
    hashCode = hashCode * 31 + [self.weixinId hash];
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [self.birthday hash];
  }
  if (self.hasZodiac) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.zodiac] hash];
  }
  if (self.hasBloodGroup) {
    hashCode = hashCode * 31 + [self.bloodGroup hash];
  }
  if (self.hasRegDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.regDate] hash];
  }
  if (self.hasRegFrom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.regFrom] hash];
  }
  if (self.hasVisitDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.visitDate] hash];
  }
  if (self.hasSDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sDate] hash];
  }
  if (self.hasAvatarBg) {
    hashCode = hashCode * 31 + [self.avatarBg hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasAvatars) {
    hashCode = hashCode * 31 + [self.avatars hash];
  }
  if (self.hasBAvatars) {
    hashCode = hashCode * 31 + [self.bAvatars hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [self.language hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasExperience) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.experience] hash];
  }
  if (self.hasCurrentDevice) {
    hashCode = hashCode * 31 + [self.currentDevice hash];
  }
  [self.devicesArray enumerateObjectsUsingBlock:^(PBDevice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasEmailVerifyStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.emailVerifyStatus] hash];
  }
  if (self.hasEmailVerifyCode) {
    hashCode = hashCode * 31 + [self.emailVerifyCode hash];
  }
  if (self.hasMobileVerifyStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mobileVerifyStatus] hash];
  }
  if (self.hasAddConfig) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.addConfig] hash];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMemo) {
    hashCode = hashCode * 31 + [self.memo hash];
  }
  if (self.hasAddSource) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.addSource] hash];
  }
  if (self.hasAddDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.addDate] hash];
  }
  if (self.hasAddDir) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.addDir] hash];
  }
  if (self.hasReplyMemo) {
    hashCode = hashCode * 31 + [self.replyMemo hash];
  }
  if (self.hasAddStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.addStatus] hash];
  }
  if (self.hasBStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bStyle] hash];
  }
  if (self.hasBSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bSpeed] hash];
  }
  if (self.hasIsAgent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAgent] hash];
  }
  if (self.hasAgentAccount) {
    hashCode = hashCode * 31 + [self.agentAccount hash];
  }
  if (self.hasAgentStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.agentStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserBuilder()
@property (strong) PBUser* resultPbuser;
@end

@implementation PBUserBuilder
@synthesize resultPbuser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuser = [[PBUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuser;
}
- (PBUserBuilder*) clear {
  self.resultPbuser = [[PBUser alloc] init];
  return self;
}
- (PBUserBuilder*) clone {
  return [PBUser builderWithPrototype:resultPbuser];
}
- (PBUser*) defaultInstance {
  return [PBUser defaultInstance];
}
- (PBUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUser*) buildPartial {
  PBUser* returnMe = resultPbuser;
  self.resultPbuser = nil;
  return returnMe;
}
- (PBUserBuilder*) mergeFrom:(PBUser*) other {
  if (other == [PBUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNick) {
    [self setNick:other.nick];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.snsUsersArray.count > 0) {
    if (resultPbuser.snsUsersArray == nil) {
      resultPbuser.snsUsersArray = [[NSMutableArray alloc] initWithArray:other.snsUsersArray];
    } else {
      [resultPbuser.snsUsersArray addObjectsFromArray:other.snsUsersArray];
    }
  }
  if (other.hasXiaojiNumber) {
    [self setXiaojiNumber:other.xiaojiNumber];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasMobile) {
    [self setMobile:other.mobile];
  }
  if (other.hasQqOpenId) {
    [self setQqOpenId:other.qqOpenId];
  }
  if (other.hasSinaId) {
    [self setSinaId:other.sinaId];
  }
  if (other.hasWeixinId) {
    [self setWeixinId:other.weixinId];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasZodiac) {
    [self setZodiac:other.zodiac];
  }
  if (other.hasBloodGroup) {
    [self setBloodGroup:other.bloodGroup];
  }
  if (other.hasRegDate) {
    [self setRegDate:other.regDate];
  }
  if (other.hasRegFrom) {
    [self setRegFrom:other.regFrom];
  }
  if (other.hasVisitDate) {
    [self setVisitDate:other.visitDate];
  }
  if (other.hasSDate) {
    [self setSDate:other.sDate];
  }
  if (other.hasAvatarBg) {
    [self setAvatarBg:other.avatarBg];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasAvatars) {
    [self setAvatars:other.avatars];
  }
  if (other.hasBAvatars) {
    [self setBAvatars:other.bAvatars];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasCurrentDevice) {
    [self mergeCurrentDevice:other.currentDevice];
  }
  if (other.devicesArray.count > 0) {
    if (resultPbuser.devicesArray == nil) {
      resultPbuser.devicesArray = [[NSMutableArray alloc] initWithArray:other.devicesArray];
    } else {
      [resultPbuser.devicesArray addObjectsFromArray:other.devicesArray];
    }
  }
  if (other.hasEmailVerifyStatus) {
    [self setEmailVerifyStatus:other.emailVerifyStatus];
  }
  if (other.hasEmailVerifyCode) {
    [self setEmailVerifyCode:other.emailVerifyCode];
  }
  if (other.hasMobileVerifyStatus) {
    [self setMobileVerifyStatus:other.mobileVerifyStatus];
  }
  if (other.hasAddConfig) {
    [self setAddConfig:other.addConfig];
  }
  if (other.tagsArray.count > 0) {
    if (resultPbuser.tagsArray == nil) {
      resultPbuser.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultPbuser.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  if (other.hasMemo) {
    [self setMemo:other.memo];
  }
  if (other.hasAddSource) {
    [self setAddSource:other.addSource];
  }
  if (other.hasAddDate) {
    [self setAddDate:other.addDate];
  }
  if (other.hasAddDir) {
    [self setAddDir:other.addDir];
  }
  if (other.hasReplyMemo) {
    [self setReplyMemo:other.replyMemo];
  }
  if (other.hasAddStatus) {
    [self setAddStatus:other.addStatus];
  }
  if (other.hasBStyle) {
    [self setBStyle:other.bStyle];
  }
  if (other.hasBSpeed) {
    [self setBSpeed:other.bSpeed];
  }
  if (other.hasIsAgent) {
    [self setIsAgent:other.isAgent];
  }
  if (other.hasAgentAccount) {
    [self setAgentAccount:other.agentAccount];
  }
  if (other.hasAgentStatus) {
    [self setAgentStatus:other.agentStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNick:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
      case 42: {
        PBSNSUserBuilder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setXiaojiNumber:[input readString]];
        break;
      }
      case 58: {
        [self setEmail:[input readString]];
        break;
      }
      case 66: {
        [self setPassword:[input readString]];
        break;
      }
      case 74: {
        [self setMobile:[input readString]];
        break;
      }
      case 82: {
        [self setQqOpenId:[input readString]];
        break;
      }
      case 90: {
        [self setSinaId:[input readString]];
        break;
      }
      case 98: {
        [self setWeixinId:[input readString]];
        break;
      }
      case 250: {
        [self setBirthday:[input readString]];
        break;
      }
      case 256: {
        [self setZodiac:[input readInt32]];
        break;
      }
      case 266: {
        [self setBloodGroup:[input readString]];
        break;
      }
      case 272: {
        [self setRegDate:[input readInt32]];
        break;
      }
      case 280: {
        [self setRegFrom:[input readInt32]];
        break;
      }
      case 288: {
        [self setVisitDate:[input readInt32]];
        break;
      }
      case 296: {
        [self setSDate:[input readInt32]];
        break;
      }
      case 330: {
        [self setAvatarBg:[input readString]];
        break;
      }
      case 338: {
        [self setSignature:[input readString]];
        break;
      }
      case 346: {
        [self setAvatars:[input readString]];
        break;
      }
      case 354: {
        [self setBAvatars:[input readString]];
        break;
      }
      case 410: {
        [self setLocation:[input readString]];
        break;
      }
      case 418: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 426: {
        [self setLanguage:[input readString]];
        break;
      }
      case 437: {
        [self setLongitude:[input readFloat]];
        break;
      }
      case 445: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 488: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 496: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 570: {
        PBDeviceBuilder* subBuilder = [PBDevice builder];
        if (self.hasCurrentDevice) {
          [subBuilder mergeFrom:self.currentDevice];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCurrentDevice:[subBuilder buildPartial]];
        break;
      }
      case 578: {
        PBDeviceBuilder* subBuilder = [PBDevice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDevices:[subBuilder buildPartial]];
        break;
      }
      case 648: {
        [self setEmailVerifyStatus:[input readInt32]];
        break;
      }
      case 658: {
        [self setEmailVerifyCode:[input readString]];
        break;
      }
      case 664: {
        [self setMobileVerifyStatus:[input readInt32]];
        break;
      }
      case 728: {
        [self setAddConfig:[input readInt32]];
        break;
      }
      case 802: {
        PBUserTagBuilder* subBuilder = [PBUserTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTags:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        [self setMemo:[input readString]];
        break;
      }
      case 816: {
        [self setAddSource:[input readInt32]];
        break;
      }
      case 824: {
        [self setAddDate:[input readInt32]];
        break;
      }
      case 832: {
        [self setAddDir:[input readInt32]];
        break;
      }
      case 842: {
        [self setReplyMemo:[input readString]];
        break;
      }
      case 848: {
        [self setAddStatus:[input readInt32]];
        break;
      }
      case 1600: {
        [self setBStyle:[input readInt32]];
        break;
      }
      case 1608: {
        [self setBSpeed:[input readInt32]];
        break;
      }
      case 1680: {
        [self setIsAgent:[input readBool]];
        break;
      }
      case 1690: {
        [self setAgentAccount:[input readString]];
        break;
      }
      case 1696: {
        [self setAgentStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuser.hasUserId;
}
- (NSString*) userId {
  return resultPbuser.userId;
}
- (PBUserBuilder*) setUserId:(NSString*) value {
  resultPbuser.hasUserId = YES;
  resultPbuser.userId = value;
  return self;
}
- (PBUserBuilder*) clearUserId {
  resultPbuser.hasUserId = NO;
  resultPbuser.userId = @"";
  return self;
}
- (BOOL) hasNick {
  return resultPbuser.hasNick;
}
- (NSString*) nick {
  return resultPbuser.nick;
}
- (PBUserBuilder*) setNick:(NSString*) value {
  resultPbuser.hasNick = YES;
  resultPbuser.nick = value;
  return self;
}
- (PBUserBuilder*) clearNick {
  resultPbuser.hasNick = NO;
  resultPbuser.nick = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbuser.hasAvatar;
}
- (NSString*) avatar {
  return resultPbuser.avatar;
}
- (PBUserBuilder*) setAvatar:(NSString*) value {
  resultPbuser.hasAvatar = YES;
  resultPbuser.avatar = value;
  return self;
}
- (PBUserBuilder*) clearAvatar {
  resultPbuser.hasAvatar = NO;
  resultPbuser.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbuser.hasGender;
}
- (BOOL) gender {
  return resultPbuser.gender;
}
- (PBUserBuilder*) setGender:(BOOL) value {
  resultPbuser.hasGender = YES;
  resultPbuser.gender = value;
  return self;
}
- (PBUserBuilder*) clearGender {
  resultPbuser.hasGender = NO;
  resultPbuser.gender = NO;
  return self;
}
- (NSMutableArray *)snsUsers {
  return resultPbuser.snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [resultPbuser snsUsersAtIndex:index];
}
- (PBUserBuilder *)addSnsUsers:(PBSNSUser*)value {
  if (resultPbuser.snsUsersArray == nil) {
    resultPbuser.snsUsersArray = [[NSMutableArray alloc]init];
  }
  [resultPbuser.snsUsersArray addObject:value];
  return self;
}
- (PBUserBuilder *)setSnsUsersArray:(NSArray *)array {
  resultPbuser.snsUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserBuilder *)clearSnsUsers {
  resultPbuser.snsUsersArray = nil;
  return self;
}
- (BOOL) hasXiaojiNumber {
  return resultPbuser.hasXiaojiNumber;
}
- (NSString*) xiaojiNumber {
  return resultPbuser.xiaojiNumber;
}
- (PBUserBuilder*) setXiaojiNumber:(NSString*) value {
  resultPbuser.hasXiaojiNumber = YES;
  resultPbuser.xiaojiNumber = value;
  return self;
}
- (PBUserBuilder*) clearXiaojiNumber {
  resultPbuser.hasXiaojiNumber = NO;
  resultPbuser.xiaojiNumber = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultPbuser.hasEmail;
}
- (NSString*) email {
  return resultPbuser.email;
}
- (PBUserBuilder*) setEmail:(NSString*) value {
  resultPbuser.hasEmail = YES;
  resultPbuser.email = value;
  return self;
}
- (PBUserBuilder*) clearEmail {
  resultPbuser.hasEmail = NO;
  resultPbuser.email = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultPbuser.hasPassword;
}
- (NSString*) password {
  return resultPbuser.password;
}
- (PBUserBuilder*) setPassword:(NSString*) value {
  resultPbuser.hasPassword = YES;
  resultPbuser.password = value;
  return self;
}
- (PBUserBuilder*) clearPassword {
  resultPbuser.hasPassword = NO;
  resultPbuser.password = @"";
  return self;
}
- (BOOL) hasMobile {
  return resultPbuser.hasMobile;
}
- (NSString*) mobile {
  return resultPbuser.mobile;
}
- (PBUserBuilder*) setMobile:(NSString*) value {
  resultPbuser.hasMobile = YES;
  resultPbuser.mobile = value;
  return self;
}
- (PBUserBuilder*) clearMobile {
  resultPbuser.hasMobile = NO;
  resultPbuser.mobile = @"";
  return self;
}
- (BOOL) hasQqOpenId {
  return resultPbuser.hasQqOpenId;
}
- (NSString*) qqOpenId {
  return resultPbuser.qqOpenId;
}
- (PBUserBuilder*) setQqOpenId:(NSString*) value {
  resultPbuser.hasQqOpenId = YES;
  resultPbuser.qqOpenId = value;
  return self;
}
- (PBUserBuilder*) clearQqOpenId {
  resultPbuser.hasQqOpenId = NO;
  resultPbuser.qqOpenId = @"";
  return self;
}
- (BOOL) hasSinaId {
  return resultPbuser.hasSinaId;
}
- (NSString*) sinaId {
  return resultPbuser.sinaId;
}
- (PBUserBuilder*) setSinaId:(NSString*) value {
  resultPbuser.hasSinaId = YES;
  resultPbuser.sinaId = value;
  return self;
}
- (PBUserBuilder*) clearSinaId {
  resultPbuser.hasSinaId = NO;
  resultPbuser.sinaId = @"";
  return self;
}
- (BOOL) hasWeixinId {
  return resultPbuser.hasWeixinId;
}
- (NSString*) weixinId {
  return resultPbuser.weixinId;
}
- (PBUserBuilder*) setWeixinId:(NSString*) value {
  resultPbuser.hasWeixinId = YES;
  resultPbuser.weixinId = value;
  return self;
}
- (PBUserBuilder*) clearWeixinId {
  resultPbuser.hasWeixinId = NO;
  resultPbuser.weixinId = @"";
  return self;
}
- (BOOL) hasBirthday {
  return resultPbuser.hasBirthday;
}
- (NSString*) birthday {
  return resultPbuser.birthday;
}
- (PBUserBuilder*) setBirthday:(NSString*) value {
  resultPbuser.hasBirthday = YES;
  resultPbuser.birthday = value;
  return self;
}
- (PBUserBuilder*) clearBirthday {
  resultPbuser.hasBirthday = NO;
  resultPbuser.birthday = @"";
  return self;
}
- (BOOL) hasZodiac {
  return resultPbuser.hasZodiac;
}
- (SInt32) zodiac {
  return resultPbuser.zodiac;
}
- (PBUserBuilder*) setZodiac:(SInt32) value {
  resultPbuser.hasZodiac = YES;
  resultPbuser.zodiac = value;
  return self;
}
- (PBUserBuilder*) clearZodiac {
  resultPbuser.hasZodiac = NO;
  resultPbuser.zodiac = 0;
  return self;
}
- (BOOL) hasBloodGroup {
  return resultPbuser.hasBloodGroup;
}
- (NSString*) bloodGroup {
  return resultPbuser.bloodGroup;
}
- (PBUserBuilder*) setBloodGroup:(NSString*) value {
  resultPbuser.hasBloodGroup = YES;
  resultPbuser.bloodGroup = value;
  return self;
}
- (PBUserBuilder*) clearBloodGroup {
  resultPbuser.hasBloodGroup = NO;
  resultPbuser.bloodGroup = @"";
  return self;
}
- (BOOL) hasRegDate {
  return resultPbuser.hasRegDate;
}
- (SInt32) regDate {
  return resultPbuser.regDate;
}
- (PBUserBuilder*) setRegDate:(SInt32) value {
  resultPbuser.hasRegDate = YES;
  resultPbuser.regDate = value;
  return self;
}
- (PBUserBuilder*) clearRegDate {
  resultPbuser.hasRegDate = NO;
  resultPbuser.regDate = 0;
  return self;
}
- (BOOL) hasRegFrom {
  return resultPbuser.hasRegFrom;
}
- (SInt32) regFrom {
  return resultPbuser.regFrom;
}
- (PBUserBuilder*) setRegFrom:(SInt32) value {
  resultPbuser.hasRegFrom = YES;
  resultPbuser.regFrom = value;
  return self;
}
- (PBUserBuilder*) clearRegFrom {
  resultPbuser.hasRegFrom = NO;
  resultPbuser.regFrom = 0;
  return self;
}
- (BOOL) hasVisitDate {
  return resultPbuser.hasVisitDate;
}
- (SInt32) visitDate {
  return resultPbuser.visitDate;
}
- (PBUserBuilder*) setVisitDate:(SInt32) value {
  resultPbuser.hasVisitDate = YES;
  resultPbuser.visitDate = value;
  return self;
}
- (PBUserBuilder*) clearVisitDate {
  resultPbuser.hasVisitDate = NO;
  resultPbuser.visitDate = 0;
  return self;
}
- (BOOL) hasSDate {
  return resultPbuser.hasSDate;
}
- (SInt32) sDate {
  return resultPbuser.sDate;
}
- (PBUserBuilder*) setSDate:(SInt32) value {
  resultPbuser.hasSDate = YES;
  resultPbuser.sDate = value;
  return self;
}
- (PBUserBuilder*) clearSDate {
  resultPbuser.hasSDate = NO;
  resultPbuser.sDate = 0;
  return self;
}
- (BOOL) hasAvatarBg {
  return resultPbuser.hasAvatarBg;
}
- (NSString*) avatarBg {
  return resultPbuser.avatarBg;
}
- (PBUserBuilder*) setAvatarBg:(NSString*) value {
  resultPbuser.hasAvatarBg = YES;
  resultPbuser.avatarBg = value;
  return self;
}
- (PBUserBuilder*) clearAvatarBg {
  resultPbuser.hasAvatarBg = NO;
  resultPbuser.avatarBg = @"";
  return self;
}
- (BOOL) hasSignature {
  return resultPbuser.hasSignature;
}
- (NSString*) signature {
  return resultPbuser.signature;
}
- (PBUserBuilder*) setSignature:(NSString*) value {
  resultPbuser.hasSignature = YES;
  resultPbuser.signature = value;
  return self;
}
- (PBUserBuilder*) clearSignature {
  resultPbuser.hasSignature = NO;
  resultPbuser.signature = @"";
  return self;
}
- (BOOL) hasAvatars {
  return resultPbuser.hasAvatars;
}
- (NSString*) avatars {
  return resultPbuser.avatars;
}
- (PBUserBuilder*) setAvatars:(NSString*) value {
  resultPbuser.hasAvatars = YES;
  resultPbuser.avatars = value;
  return self;
}
- (PBUserBuilder*) clearAvatars {
  resultPbuser.hasAvatars = NO;
  resultPbuser.avatars = @"";
  return self;
}
- (BOOL) hasBAvatars {
  return resultPbuser.hasBAvatars;
}
- (NSString*) bAvatars {
  return resultPbuser.bAvatars;
}
- (PBUserBuilder*) setBAvatars:(NSString*) value {
  resultPbuser.hasBAvatars = YES;
  resultPbuser.bAvatars = value;
  return self;
}
- (PBUserBuilder*) clearBAvatars {
  resultPbuser.hasBAvatars = NO;
  resultPbuser.bAvatars = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultPbuser.hasLocation;
}
- (NSString*) location {
  return resultPbuser.location;
}
- (PBUserBuilder*) setLocation:(NSString*) value {
  resultPbuser.hasLocation = YES;
  resultPbuser.location = value;
  return self;
}
- (PBUserBuilder*) clearLocation {
  resultPbuser.hasLocation = NO;
  resultPbuser.location = @"";
  return self;
}
- (BOOL) hasCountryCode {
  return resultPbuser.hasCountryCode;
}
- (NSString*) countryCode {
  return resultPbuser.countryCode;
}
- (PBUserBuilder*) setCountryCode:(NSString*) value {
  resultPbuser.hasCountryCode = YES;
  resultPbuser.countryCode = value;
  return self;
}
- (PBUserBuilder*) clearCountryCode {
  resultPbuser.hasCountryCode = NO;
  resultPbuser.countryCode = @"";
  return self;
}
- (BOOL) hasLanguage {
  return resultPbuser.hasLanguage;
}
- (NSString*) language {
  return resultPbuser.language;
}
- (PBUserBuilder*) setLanguage:(NSString*) value {
  resultPbuser.hasLanguage = YES;
  resultPbuser.language = value;
  return self;
}
- (PBUserBuilder*) clearLanguage {
  resultPbuser.hasLanguage = NO;
  resultPbuser.language = @"";
  return self;
}
- (BOOL) hasLongitude {
  return resultPbuser.hasLongitude;
}
- (Float32) longitude {
  return resultPbuser.longitude;
}
- (PBUserBuilder*) setLongitude:(Float32) value {
  resultPbuser.hasLongitude = YES;
  resultPbuser.longitude = value;
  return self;
}
- (PBUserBuilder*) clearLongitude {
  resultPbuser.hasLongitude = NO;
  resultPbuser.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultPbuser.hasLatitude;
}
- (Float32) latitude {
  return resultPbuser.latitude;
}
- (PBUserBuilder*) setLatitude:(Float32) value {
  resultPbuser.hasLatitude = YES;
  resultPbuser.latitude = value;
  return self;
}
- (PBUserBuilder*) clearLatitude {
  resultPbuser.hasLatitude = NO;
  resultPbuser.latitude = 0;
  return self;
}
- (BOOL) hasLevel {
  return resultPbuser.hasLevel;
}
- (SInt32) level {
  return resultPbuser.level;
}
- (PBUserBuilder*) setLevel:(SInt32) value {
  resultPbuser.hasLevel = YES;
  resultPbuser.level = value;
  return self;
}
- (PBUserBuilder*) clearLevel {
  resultPbuser.hasLevel = NO;
  resultPbuser.level = 0;
  return self;
}
- (BOOL) hasExperience {
  return resultPbuser.hasExperience;
}
- (SInt64) experience {
  return resultPbuser.experience;
}
- (PBUserBuilder*) setExperience:(SInt64) value {
  resultPbuser.hasExperience = YES;
  resultPbuser.experience = value;
  return self;
}
- (PBUserBuilder*) clearExperience {
  resultPbuser.hasExperience = NO;
  resultPbuser.experience = 0L;
  return self;
}
- (BOOL) hasCurrentDevice {
  return resultPbuser.hasCurrentDevice;
}
- (PBDevice*) currentDevice {
  return resultPbuser.currentDevice;
}
- (PBUserBuilder*) setCurrentDevice:(PBDevice*) value {
  resultPbuser.hasCurrentDevice = YES;
  resultPbuser.currentDevice = value;
  return self;
}
- (PBUserBuilder*) setCurrentDeviceBuilder:(PBDeviceBuilder*) builderForValue {
  return [self setCurrentDevice:[builderForValue build]];
}
- (PBUserBuilder*) mergeCurrentDevice:(PBDevice*) value {
  if (resultPbuser.hasCurrentDevice &&
      resultPbuser.currentDevice != [PBDevice defaultInstance]) {
    resultPbuser.currentDevice =
      [[[PBDevice builderWithPrototype:resultPbuser.currentDevice] mergeFrom:value] buildPartial];
  } else {
    resultPbuser.currentDevice = value;
  }
  resultPbuser.hasCurrentDevice = YES;
  return self;
}
- (PBUserBuilder*) clearCurrentDevice {
  resultPbuser.hasCurrentDevice = NO;
  resultPbuser.currentDevice = [PBDevice defaultInstance];
  return self;
}
- (NSMutableArray *)devices {
  return resultPbuser.devicesArray;
}
- (PBDevice*)devicesAtIndex:(NSUInteger)index {
  return [resultPbuser devicesAtIndex:index];
}
- (PBUserBuilder *)addDevices:(PBDevice*)value {
  if (resultPbuser.devicesArray == nil) {
    resultPbuser.devicesArray = [[NSMutableArray alloc]init];
  }
  [resultPbuser.devicesArray addObject:value];
  return self;
}
- (PBUserBuilder *)setDevicesArray:(NSArray *)array {
  resultPbuser.devicesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserBuilder *)clearDevices {
  resultPbuser.devicesArray = nil;
  return self;
}
- (BOOL) hasEmailVerifyStatus {
  return resultPbuser.hasEmailVerifyStatus;
}
- (SInt32) emailVerifyStatus {
  return resultPbuser.emailVerifyStatus;
}
- (PBUserBuilder*) setEmailVerifyStatus:(SInt32) value {
  resultPbuser.hasEmailVerifyStatus = YES;
  resultPbuser.emailVerifyStatus = value;
  return self;
}
- (PBUserBuilder*) clearEmailVerifyStatus {
  resultPbuser.hasEmailVerifyStatus = NO;
  resultPbuser.emailVerifyStatus = 0;
  return self;
}
- (BOOL) hasEmailVerifyCode {
  return resultPbuser.hasEmailVerifyCode;
}
- (NSString*) emailVerifyCode {
  return resultPbuser.emailVerifyCode;
}
- (PBUserBuilder*) setEmailVerifyCode:(NSString*) value {
  resultPbuser.hasEmailVerifyCode = YES;
  resultPbuser.emailVerifyCode = value;
  return self;
}
- (PBUserBuilder*) clearEmailVerifyCode {
  resultPbuser.hasEmailVerifyCode = NO;
  resultPbuser.emailVerifyCode = @"";
  return self;
}
- (BOOL) hasMobileVerifyStatus {
  return resultPbuser.hasMobileVerifyStatus;
}
- (SInt32) mobileVerifyStatus {
  return resultPbuser.mobileVerifyStatus;
}
- (PBUserBuilder*) setMobileVerifyStatus:(SInt32) value {
  resultPbuser.hasMobileVerifyStatus = YES;
  resultPbuser.mobileVerifyStatus = value;
  return self;
}
- (PBUserBuilder*) clearMobileVerifyStatus {
  resultPbuser.hasMobileVerifyStatus = NO;
  resultPbuser.mobileVerifyStatus = 0;
  return self;
}
- (BOOL) hasAddConfig {
  return resultPbuser.hasAddConfig;
}
- (SInt32) addConfig {
  return resultPbuser.addConfig;
}
- (PBUserBuilder*) setAddConfig:(SInt32) value {
  resultPbuser.hasAddConfig = YES;
  resultPbuser.addConfig = value;
  return self;
}
- (PBUserBuilder*) clearAddConfig {
  resultPbuser.hasAddConfig = NO;
  resultPbuser.addConfig = 0;
  return self;
}
- (NSMutableArray *)tags {
  return resultPbuser.tagsArray;
}
- (PBUserTag*)tagsAtIndex:(NSUInteger)index {
  return [resultPbuser tagsAtIndex:index];
}
- (PBUserBuilder *)addTags:(PBUserTag*)value {
  if (resultPbuser.tagsArray == nil) {
    resultPbuser.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuser.tagsArray addObject:value];
  return self;
}
- (PBUserBuilder *)setTagsArray:(NSArray *)array {
  resultPbuser.tagsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserBuilder *)clearTags {
  resultPbuser.tagsArray = nil;
  return self;
}
- (BOOL) hasMemo {
  return resultPbuser.hasMemo;
}
- (NSString*) memo {
  return resultPbuser.memo;
}
- (PBUserBuilder*) setMemo:(NSString*) value {
  resultPbuser.hasMemo = YES;
  resultPbuser.memo = value;
  return self;
}
- (PBUserBuilder*) clearMemo {
  resultPbuser.hasMemo = NO;
  resultPbuser.memo = @"";
  return self;
}
- (BOOL) hasAddSource {
  return resultPbuser.hasAddSource;
}
- (SInt32) addSource {
  return resultPbuser.addSource;
}
- (PBUserBuilder*) setAddSource:(SInt32) value {
  resultPbuser.hasAddSource = YES;
  resultPbuser.addSource = value;
  return self;
}
- (PBUserBuilder*) clearAddSource {
  resultPbuser.hasAddSource = NO;
  resultPbuser.addSource = 0;
  return self;
}
- (BOOL) hasAddDate {
  return resultPbuser.hasAddDate;
}
- (SInt32) addDate {
  return resultPbuser.addDate;
}
- (PBUserBuilder*) setAddDate:(SInt32) value {
  resultPbuser.hasAddDate = YES;
  resultPbuser.addDate = value;
  return self;
}
- (PBUserBuilder*) clearAddDate {
  resultPbuser.hasAddDate = NO;
  resultPbuser.addDate = 0;
  return self;
}
- (BOOL) hasAddDir {
  return resultPbuser.hasAddDir;
}
- (SInt32) addDir {
  return resultPbuser.addDir;
}
- (PBUserBuilder*) setAddDir:(SInt32) value {
  resultPbuser.hasAddDir = YES;
  resultPbuser.addDir = value;
  return self;
}
- (PBUserBuilder*) clearAddDir {
  resultPbuser.hasAddDir = NO;
  resultPbuser.addDir = 0;
  return self;
}
- (BOOL) hasReplyMemo {
  return resultPbuser.hasReplyMemo;
}
- (NSString*) replyMemo {
  return resultPbuser.replyMemo;
}
- (PBUserBuilder*) setReplyMemo:(NSString*) value {
  resultPbuser.hasReplyMemo = YES;
  resultPbuser.replyMemo = value;
  return self;
}
- (PBUserBuilder*) clearReplyMemo {
  resultPbuser.hasReplyMemo = NO;
  resultPbuser.replyMemo = @"";
  return self;
}
- (BOOL) hasAddStatus {
  return resultPbuser.hasAddStatus;
}
- (SInt32) addStatus {
  return resultPbuser.addStatus;
}
- (PBUserBuilder*) setAddStatus:(SInt32) value {
  resultPbuser.hasAddStatus = YES;
  resultPbuser.addStatus = value;
  return self;
}
- (PBUserBuilder*) clearAddStatus {
  resultPbuser.hasAddStatus = NO;
  resultPbuser.addStatus = 7;
  return self;
}
- (BOOL) hasBStyle {
  return resultPbuser.hasBStyle;
}
- (SInt32) bStyle {
  return resultPbuser.bStyle;
}
- (PBUserBuilder*) setBStyle:(SInt32) value {
  resultPbuser.hasBStyle = YES;
  resultPbuser.bStyle = value;
  return self;
}
- (PBUserBuilder*) clearBStyle {
  resultPbuser.hasBStyle = NO;
  resultPbuser.bStyle = 0;
  return self;
}
- (BOOL) hasBSpeed {
  return resultPbuser.hasBSpeed;
}
- (SInt32) bSpeed {
  return resultPbuser.bSpeed;
}
- (PBUserBuilder*) setBSpeed:(SInt32) value {
  resultPbuser.hasBSpeed = YES;
  resultPbuser.bSpeed = value;
  return self;
}
- (PBUserBuilder*) clearBSpeed {
  resultPbuser.hasBSpeed = NO;
  resultPbuser.bSpeed = 0;
  return self;
}
- (BOOL) hasIsAgent {
  return resultPbuser.hasIsAgent;
}
- (BOOL) isAgent {
  return resultPbuser.isAgent;
}
- (PBUserBuilder*) setIsAgent:(BOOL) value {
  resultPbuser.hasIsAgent = YES;
  resultPbuser.isAgent = value;
  return self;
}
- (PBUserBuilder*) clearIsAgent {
  resultPbuser.hasIsAgent = NO;
  resultPbuser.isAgent = NO;
  return self;
}
- (BOOL) hasAgentAccount {
  return resultPbuser.hasAgentAccount;
}
- (NSString*) agentAccount {
  return resultPbuser.agentAccount;
}
- (PBUserBuilder*) setAgentAccount:(NSString*) value {
  resultPbuser.hasAgentAccount = YES;
  resultPbuser.agentAccount = value;
  return self;
}
- (PBUserBuilder*) clearAgentAccount {
  resultPbuser.hasAgentAccount = NO;
  resultPbuser.agentAccount = @"";
  return self;
}
- (BOOL) hasAgentStatus {
  return resultPbuser.hasAgentStatus;
}
- (SInt32) agentStatus {
  return resultPbuser.agentStatus;
}
- (PBUserBuilder*) setAgentStatus:(SInt32) value {
  resultPbuser.hasAgentStatus = YES;
  resultPbuser.agentStatus = value;
  return self;
}
- (PBUserBuilder*) clearAgentStatus {
  resultPbuser.hasAgentStatus = NO;
  resultPbuser.agentStatus = 0;
  return self;
}
@end

@interface PBUserTag ()
@property (strong) NSString* name;
@property (strong) NSString* tid;
@property BOOL isCustom;
@property SInt32 color;
@property (strong) NSMutableArray * usersArray;
@property (strong) NSMutableArray * userIdsArray;
@end

@implementation PBUserTag

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTid {
  return !!hasTid_;
}
- (void) setHasTid:(BOOL) _value_ {
  hasTid_ = !!_value_;
}
@synthesize tid;
- (BOOL) hasIsCustom {
  return !!hasIsCustom_;
}
- (void) setHasIsCustom:(BOOL) _value_ {
  hasIsCustom_ = !!_value_;
}
- (BOOL) isCustom {
  return !!isCustom_;
}
- (void) setIsCustom:(BOOL) _value_ {
  isCustom_ = !!_value_;
}
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
@synthesize usersArray;
@dynamic users;
@synthesize userIdsArray;
@dynamic userIds;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.tid = @"";
    self.isCustom = NO;
    self.color = 0;
  }
  return self;
}
static PBUserTag* defaultPBUserTagInstance = nil;
+ (void) initialize {
  if (self == [PBUserTag class]) {
    defaultPBUserTagInstance = [[PBUserTag alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserTagInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserTagInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (PBUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (NSArray *)userIds {
  return userIdsArray;
}
- (NSString*)userIdsAtIndex:(NSUInteger)index {
  return [userIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTid) {
    return NO;
  }
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTid) {
    [output writeString:2 value:self.tid];
  }
  if (self.hasIsCustom) {
    [output writeBool:3 value:self.isCustom];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.userIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasTid) {
    size_ += computeStringSize(2, self.tid);
  }
  if (self.hasIsCustom) {
    size_ += computeBoolSize(3, self.isCustom);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(4, self.color);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdsArray.count;
    [self.userIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserTag*) parseFromData:(NSData*) data {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromData:data] build];
}
+ (PBUserTag*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserTag*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromInputStream:input] build];
}
+ (PBUserTag*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTag*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserTag*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTag*)[[[PBUserTag builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTagBuilder*) builder {
  return [[PBUserTagBuilder alloc] init];
}
+ (PBUserTagBuilder*) builderWithPrototype:(PBUserTag*) prototype {
  return [[PBUserTag builder] mergeFrom:prototype];
}
- (PBUserTagBuilder*) builder {
  return [PBUserTag builder];
}
- (PBUserTagBuilder*) toBuilder {
  return [PBUserTag builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tid", self.tid];
  }
  if (self.hasIsCustom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCustom", [NSNumber numberWithBool:self.isCustom]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserTag class]]) {
    return NO;
  }
  PBUserTag *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTid == otherMessage.hasTid &&
      (!self.hasTid || [self.tid isEqual:otherMessage.tid]) &&
      self.hasIsCustom == otherMessage.hasIsCustom &&
      (!self.hasIsCustom || self.isCustom == otherMessage.isCustom) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.userIdsArray isEqualToArray:otherMessage.userIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTid) {
    hashCode = hashCode * 31 + [self.tid hash];
  }
  if (self.hasIsCustom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCustom] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserTagBuilder()
@property (strong) PBUserTag* resultPbuserTag;
@end

@implementation PBUserTagBuilder
@synthesize resultPbuserTag;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserTag = [[PBUserTag alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserTag;
}
- (PBUserTagBuilder*) clear {
  self.resultPbuserTag = [[PBUserTag alloc] init];
  return self;
}
- (PBUserTagBuilder*) clone {
  return [PBUserTag builderWithPrototype:resultPbuserTag];
}
- (PBUserTag*) defaultInstance {
  return [PBUserTag defaultInstance];
}
- (PBUserTag*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserTag*) buildPartial {
  PBUserTag* returnMe = resultPbuserTag;
  self.resultPbuserTag = nil;
  return returnMe;
}
- (PBUserTagBuilder*) mergeFrom:(PBUserTag*) other {
  if (other == [PBUserTag defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTid) {
    [self setTid:other.tid];
  }
  if (other.hasIsCustom) {
    [self setIsCustom:other.isCustom];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.usersArray.count > 0) {
    if (resultPbuserTag.usersArray == nil) {
      resultPbuserTag.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultPbuserTag.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  if (other.userIdsArray.count > 0) {
    if (resultPbuserTag.userIdsArray == nil) {
      resultPbuserTag.userIdsArray = [[NSMutableArray alloc] initWithArray:other.userIdsArray];
    } else {
      [resultPbuserTag.userIdsArray addObjectsFromArray:other.userIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserTagBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserTagBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTid:[input readString]];
        break;
      }
      case 24: {
        [self setIsCustom:[input readBool]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
      case 82: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self addUserIds:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultPbuserTag.hasName;
}
- (NSString*) name {
  return resultPbuserTag.name;
}
- (PBUserTagBuilder*) setName:(NSString*) value {
  resultPbuserTag.hasName = YES;
  resultPbuserTag.name = value;
  return self;
}
- (PBUserTagBuilder*) clearName {
  resultPbuserTag.hasName = NO;
  resultPbuserTag.name = @"";
  return self;
}
- (BOOL) hasTid {
  return resultPbuserTag.hasTid;
}
- (NSString*) tid {
  return resultPbuserTag.tid;
}
- (PBUserTagBuilder*) setTid:(NSString*) value {
  resultPbuserTag.hasTid = YES;
  resultPbuserTag.tid = value;
  return self;
}
- (PBUserTagBuilder*) clearTid {
  resultPbuserTag.hasTid = NO;
  resultPbuserTag.tid = @"";
  return self;
}
- (BOOL) hasIsCustom {
  return resultPbuserTag.hasIsCustom;
}
- (BOOL) isCustom {
  return resultPbuserTag.isCustom;
}
- (PBUserTagBuilder*) setIsCustom:(BOOL) value {
  resultPbuserTag.hasIsCustom = YES;
  resultPbuserTag.isCustom = value;
  return self;
}
- (PBUserTagBuilder*) clearIsCustom {
  resultPbuserTag.hasIsCustom = NO;
  resultPbuserTag.isCustom = NO;
  return self;
}
- (BOOL) hasColor {
  return resultPbuserTag.hasColor;
}
- (SInt32) color {
  return resultPbuserTag.color;
}
- (PBUserTagBuilder*) setColor:(SInt32) value {
  resultPbuserTag.hasColor = YES;
  resultPbuserTag.color = value;
  return self;
}
- (PBUserTagBuilder*) clearColor {
  resultPbuserTag.hasColor = NO;
  resultPbuserTag.color = 0;
  return self;
}
- (NSMutableArray *)users {
  return resultPbuserTag.usersArray;
}
- (PBUser*)usersAtIndex:(NSUInteger)index {
  return [resultPbuserTag usersAtIndex:index];
}
- (PBUserTagBuilder *)addUsers:(PBUser*)value {
  if (resultPbuserTag.usersArray == nil) {
    resultPbuserTag.usersArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserTag.usersArray addObject:value];
  return self;
}
- (PBUserTagBuilder *)setUsersArray:(NSArray *)array {
  resultPbuserTag.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserTagBuilder *)clearUsers {
  resultPbuserTag.usersArray = nil;
  return self;
}
- (NSMutableArray *)userIds {
  return resultPbuserTag.userIdsArray;
}
- (NSString*)userIdsAtIndex:(NSUInteger)index {
  return [resultPbuserTag userIdsAtIndex:index];
}
- (PBUserTagBuilder *)addUserIds:(NSString*)value {
  if (resultPbuserTag.userIdsArray == nil) {
    resultPbuserTag.userIdsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserTag.userIdsArray addObject:value];
  return self;
}
- (PBUserTagBuilder *)setUserIdsArray:(NSArray *)array {
  resultPbuserTag.userIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBUserTagBuilder *)clearUserIds {
  resultPbuserTag.userIdsArray = nil;
  return self;
}
@end

@interface PBUserTagList ()
@property (strong) NSMutableArray * tagsArray;
@end

@implementation PBUserTagList

@synthesize tagsArray;
@dynamic tags;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBUserTagList* defaultPBUserTagListInstance = nil;
+ (void) initialize {
  if (self == [PBUserTagList class]) {
    defaultPBUserTagListInstance = [[PBUserTagList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserTagListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserTagListInstance;
}
- (NSArray *)tags {
  return tagsArray;
}
- (PBUserTag*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInittags = YES;
   [self.tags enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittags = NO;
      *stop = YES;
    }
  }];
  if (!isInittags) return isInittags;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserTagList*) parseFromData:(NSData*) data {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromData:data] build];
}
+ (PBUserTagList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserTagList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromInputStream:input] build];
}
+ (PBUserTagList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTagList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserTagList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTagList*)[[[PBUserTagList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTagListBuilder*) builder {
  return [[PBUserTagListBuilder alloc] init];
}
+ (PBUserTagListBuilder*) builderWithPrototype:(PBUserTagList*) prototype {
  return [[PBUserTagList builder] mergeFrom:prototype];
}
- (PBUserTagListBuilder*) builder {
  return [PBUserTagList builder];
}
- (PBUserTagListBuilder*) toBuilder {
  return [PBUserTagList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tags"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserTagList class]]) {
    return NO;
  }
  PBUserTagList *otherMessage = other;
  return
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.tagsArray enumerateObjectsUsingBlock:^(PBUserTag *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserTagListBuilder()
@property (strong) PBUserTagList* resultPbuserTagList;
@end

@implementation PBUserTagListBuilder
@synthesize resultPbuserTagList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserTagList = [[PBUserTagList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserTagList;
}
- (PBUserTagListBuilder*) clear {
  self.resultPbuserTagList = [[PBUserTagList alloc] init];
  return self;
}
- (PBUserTagListBuilder*) clone {
  return [PBUserTagList builderWithPrototype:resultPbuserTagList];
}
- (PBUserTagList*) defaultInstance {
  return [PBUserTagList defaultInstance];
}
- (PBUserTagList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserTagList*) buildPartial {
  PBUserTagList* returnMe = resultPbuserTagList;
  self.resultPbuserTagList = nil;
  return returnMe;
}
- (PBUserTagListBuilder*) mergeFrom:(PBUserTagList*) other {
  if (other == [PBUserTagList defaultInstance]) {
    return self;
  }
  if (other.tagsArray.count > 0) {
    if (resultPbuserTagList.tagsArray == nil) {
      resultPbuserTagList.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultPbuserTagList.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserTagListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserTagListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserTagBuilder* subBuilder = [PBUserTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTags:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)tags {
  return resultPbuserTagList.tagsArray;
}
- (PBUserTag*)tagsAtIndex:(NSUInteger)index {
  return [resultPbuserTagList tagsAtIndex:index];
}
- (PBUserTagListBuilder *)addTags:(PBUserTag*)value {
  if (resultPbuserTagList.tagsArray == nil) {
    resultPbuserTagList.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserTagList.tagsArray addObject:value];
  return self;
}
- (PBUserTagListBuilder *)setTagsArray:(NSArray *)array {
  resultPbuserTagList.tagsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserTagListBuilder *)clearTags {
  resultPbuserTagList.tagsArray = nil;
  return self;
}
@end

@interface PBUserFriendList ()
@property (strong) NSMutableArray * friendsArray;
@property (strong) NSMutableArray * requestFriendsArray;
@property SInt32 requestNewCount;
@end

@implementation PBUserFriendList

@synthesize friendsArray;
@dynamic friends;
@synthesize requestFriendsArray;
@dynamic requestFriends;
- (BOOL) hasRequestNewCount {
  return !!hasRequestNewCount_;
}
- (void) setHasRequestNewCount:(BOOL) _value_ {
  hasRequestNewCount_ = !!_value_;
}
@synthesize requestNewCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestNewCount = 0;
  }
  return self;
}
static PBUserFriendList* defaultPBUserFriendListInstance = nil;
+ (void) initialize {
  if (self == [PBUserFriendList class]) {
    defaultPBUserFriendListInstance = [[PBUserFriendList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserFriendListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserFriendListInstance;
}
- (NSArray *)friends {
  return friendsArray;
}
- (PBUser*)friendsAtIndex:(NSUInteger)index {
  return [friendsArray objectAtIndex:index];
}
- (NSArray *)requestFriends {
  return requestFriendsArray;
}
- (PBUser*)requestFriendsAtIndex:(NSUInteger)index {
  return [requestFriendsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitfriends = YES;
   [self.friends enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfriends = NO;
      *stop = YES;
    }
  }];
  if (!isInitfriends) return isInitfriends;
  __block BOOL isInitrequestFriends = YES;
   [self.requestFriends enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrequestFriends = NO;
      *stop = YES;
    }
  }];
  if (!isInitrequestFriends) return isInitrequestFriends;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.friendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.requestFriendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasRequestNewCount) {
    [output writeInt32:3 value:self.requestNewCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.friendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.requestFriendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasRequestNewCount) {
    size_ += computeInt32Size(3, self.requestNewCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserFriendList*) parseFromData:(NSData*) data {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromData:data] build];
}
+ (PBUserFriendList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserFriendList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromInputStream:input] build];
}
+ (PBUserFriendList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserFriendList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserFriendList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserFriendList*)[[[PBUserFriendList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserFriendListBuilder*) builder {
  return [[PBUserFriendListBuilder alloc] init];
}
+ (PBUserFriendListBuilder*) builderWithPrototype:(PBUserFriendList*) prototype {
  return [[PBUserFriendList builder] mergeFrom:prototype];
}
- (PBUserFriendListBuilder*) builder {
  return [PBUserFriendList builder];
}
- (PBUserFriendListBuilder*) toBuilder {
  return [PBUserFriendList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.friendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"friends"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.requestFriendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestFriends"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasRequestNewCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestNewCount", [NSNumber numberWithInteger:self.requestNewCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserFriendList class]]) {
    return NO;
  }
  PBUserFriendList *otherMessage = other;
  return
      [self.friendsArray isEqualToArray:otherMessage.friendsArray] &&
      [self.requestFriendsArray isEqualToArray:otherMessage.requestFriendsArray] &&
      self.hasRequestNewCount == otherMessage.hasRequestNewCount &&
      (!self.hasRequestNewCount || self.requestNewCount == otherMessage.requestNewCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.friendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.requestFriendsArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasRequestNewCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requestNewCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserFriendListBuilder()
@property (strong) PBUserFriendList* resultPbuserFriendList;
@end

@implementation PBUserFriendListBuilder
@synthesize resultPbuserFriendList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserFriendList = [[PBUserFriendList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserFriendList;
}
- (PBUserFriendListBuilder*) clear {
  self.resultPbuserFriendList = [[PBUserFriendList alloc] init];
  return self;
}
- (PBUserFriendListBuilder*) clone {
  return [PBUserFriendList builderWithPrototype:resultPbuserFriendList];
}
- (PBUserFriendList*) defaultInstance {
  return [PBUserFriendList defaultInstance];
}
- (PBUserFriendList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserFriendList*) buildPartial {
  PBUserFriendList* returnMe = resultPbuserFriendList;
  self.resultPbuserFriendList = nil;
  return returnMe;
}
- (PBUserFriendListBuilder*) mergeFrom:(PBUserFriendList*) other {
  if (other == [PBUserFriendList defaultInstance]) {
    return self;
  }
  if (other.friendsArray.count > 0) {
    if (resultPbuserFriendList.friendsArray == nil) {
      resultPbuserFriendList.friendsArray = [[NSMutableArray alloc] initWithArray:other.friendsArray];
    } else {
      [resultPbuserFriendList.friendsArray addObjectsFromArray:other.friendsArray];
    }
  }
  if (other.requestFriendsArray.count > 0) {
    if (resultPbuserFriendList.requestFriendsArray == nil) {
      resultPbuserFriendList.requestFriendsArray = [[NSMutableArray alloc] initWithArray:other.requestFriendsArray];
    } else {
      [resultPbuserFriendList.requestFriendsArray addObjectsFromArray:other.requestFriendsArray];
    }
  }
  if (other.hasRequestNewCount) {
    [self setRequestNewCount:other.requestNewCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserFriendListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserFriendListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFriends:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequestFriends:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setRequestNewCount:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)friends {
  return resultPbuserFriendList.friendsArray;
}
- (PBUser*)friendsAtIndex:(NSUInteger)index {
  return [resultPbuserFriendList friendsAtIndex:index];
}
- (PBUserFriendListBuilder *)addFriends:(PBUser*)value {
  if (resultPbuserFriendList.friendsArray == nil) {
    resultPbuserFriendList.friendsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserFriendList.friendsArray addObject:value];
  return self;
}
- (PBUserFriendListBuilder *)setFriendsArray:(NSArray *)array {
  resultPbuserFriendList.friendsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserFriendListBuilder *)clearFriends {
  resultPbuserFriendList.friendsArray = nil;
  return self;
}
- (NSMutableArray *)requestFriends {
  return resultPbuserFriendList.requestFriendsArray;
}
- (PBUser*)requestFriendsAtIndex:(NSUInteger)index {
  return [resultPbuserFriendList requestFriendsAtIndex:index];
}
- (PBUserFriendListBuilder *)addRequestFriends:(PBUser*)value {
  if (resultPbuserFriendList.requestFriendsArray == nil) {
    resultPbuserFriendList.requestFriendsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserFriendList.requestFriendsArray addObject:value];
  return self;
}
- (PBUserFriendListBuilder *)setRequestFriendsArray:(NSArray *)array {
  resultPbuserFriendList.requestFriendsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserFriendListBuilder *)clearRequestFriends {
  resultPbuserFriendList.requestFriendsArray = nil;
  return self;
}
- (BOOL) hasRequestNewCount {
  return resultPbuserFriendList.hasRequestNewCount;
}
- (SInt32) requestNewCount {
  return resultPbuserFriendList.requestNewCount;
}
- (PBUserFriendListBuilder*) setRequestNewCount:(SInt32) value {
  resultPbuserFriendList.hasRequestNewCount = YES;
  resultPbuserFriendList.requestNewCount = value;
  return self;
}
- (PBUserFriendListBuilder*) clearRequestNewCount {
  resultPbuserFriendList.hasRequestNewCount = NO;
  resultPbuserFriendList.requestNewCount = 0;
  return self;
}
@end

@interface PBInviteCode ()
@property (strong) NSString* code;
@property SInt32 status;
@property (strong) NSString* sendTo;
@property SInt32 sendType;
@property (strong) NSString* ownerUserId;
@property (strong) NSString* usedByUserId;
@end

@implementation PBInviteCode

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasSendTo {
  return !!hasSendTo_;
}
- (void) setHasSendTo:(BOOL) _value_ {
  hasSendTo_ = !!_value_;
}
@synthesize sendTo;
- (BOOL) hasSendType {
  return !!hasSendType_;
}
- (void) setHasSendType:(BOOL) _value_ {
  hasSendType_ = !!_value_;
}
@synthesize sendType;
- (BOOL) hasOwnerUserId {
  return !!hasOwnerUserId_;
}
- (void) setHasOwnerUserId:(BOOL) _value_ {
  hasOwnerUserId_ = !!_value_;
}
@synthesize ownerUserId;
- (BOOL) hasUsedByUserId {
  return !!hasUsedByUserId_;
}
- (void) setHasUsedByUserId:(BOOL) _value_ {
  hasUsedByUserId_ = !!_value_;
}
@synthesize usedByUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = @"";
    self.status = 0;
    self.sendTo = @"";
    self.sendType = 0;
    self.ownerUserId = @"";
    self.usedByUserId = @"";
  }
  return self;
}
static PBInviteCode* defaultPBInviteCodeInstance = nil;
+ (void) initialize {
  if (self == [PBInviteCode class]) {
    defaultPBInviteCodeInstance = [[PBInviteCode alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBInviteCodeInstance;
}
- (instancetype) defaultInstance {
  return defaultPBInviteCodeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasSendTo) {
    [output writeString:3 value:self.sendTo];
  }
  if (self.hasSendType) {
    [output writeInt32:4 value:self.sendType];
  }
  if (self.hasOwnerUserId) {
    [output writeString:5 value:self.ownerUserId];
  }
  if (self.hasUsedByUserId) {
    [output writeString:6 value:self.usedByUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeStringSize(1, self.code);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(2, self.status);
  }
  if (self.hasSendTo) {
    size_ += computeStringSize(3, self.sendTo);
  }
  if (self.hasSendType) {
    size_ += computeInt32Size(4, self.sendType);
  }
  if (self.hasOwnerUserId) {
    size_ += computeStringSize(5, self.ownerUserId);
  }
  if (self.hasUsedByUserId) {
    size_ += computeStringSize(6, self.usedByUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBInviteCode*) parseFromData:(NSData*) data {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromData:data] build];
}
+ (PBInviteCode*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBInviteCode*) parseFromInputStream:(NSInputStream*) input {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromInputStream:input] build];
}
+ (PBInviteCode*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBInviteCode*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromCodedInputStream:input] build];
}
+ (PBInviteCode*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBInviteCode*)[[[PBInviteCode builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBInviteCodeBuilder*) builder {
  return [[PBInviteCodeBuilder alloc] init];
}
+ (PBInviteCodeBuilder*) builderWithPrototype:(PBInviteCode*) prototype {
  return [[PBInviteCode builder] mergeFrom:prototype];
}
- (PBInviteCodeBuilder*) builder {
  return [PBInviteCode builder];
}
- (PBInviteCodeBuilder*) toBuilder {
  return [PBInviteCode builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasSendTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendTo", self.sendTo];
  }
  if (self.hasSendType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendType", [NSNumber numberWithInteger:self.sendType]];
  }
  if (self.hasOwnerUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerUserId", self.ownerUserId];
  }
  if (self.hasUsedByUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usedByUserId", self.usedByUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBInviteCode class]]) {
    return NO;
  }
  PBInviteCode *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasSendTo == otherMessage.hasSendTo &&
      (!self.hasSendTo || [self.sendTo isEqual:otherMessage.sendTo]) &&
      self.hasSendType == otherMessage.hasSendType &&
      (!self.hasSendType || self.sendType == otherMessage.sendType) &&
      self.hasOwnerUserId == otherMessage.hasOwnerUserId &&
      (!self.hasOwnerUserId || [self.ownerUserId isEqual:otherMessage.ownerUserId]) &&
      self.hasUsedByUserId == otherMessage.hasUsedByUserId &&
      (!self.hasUsedByUserId || [self.usedByUserId isEqual:otherMessage.usedByUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasSendTo) {
    hashCode = hashCode * 31 + [self.sendTo hash];
  }
  if (self.hasSendType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sendType] hash];
  }
  if (self.hasOwnerUserId) {
    hashCode = hashCode * 31 + [self.ownerUserId hash];
  }
  if (self.hasUsedByUserId) {
    hashCode = hashCode * 31 + [self.usedByUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBInviteCodeBuilder()
@property (strong) PBInviteCode* resultPbinviteCode;
@end

@implementation PBInviteCodeBuilder
@synthesize resultPbinviteCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbinviteCode = [[PBInviteCode alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbinviteCode;
}
- (PBInviteCodeBuilder*) clear {
  self.resultPbinviteCode = [[PBInviteCode alloc] init];
  return self;
}
- (PBInviteCodeBuilder*) clone {
  return [PBInviteCode builderWithPrototype:resultPbinviteCode];
}
- (PBInviteCode*) defaultInstance {
  return [PBInviteCode defaultInstance];
}
- (PBInviteCode*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBInviteCode*) buildPartial {
  PBInviteCode* returnMe = resultPbinviteCode;
  self.resultPbinviteCode = nil;
  return returnMe;
}
- (PBInviteCodeBuilder*) mergeFrom:(PBInviteCode*) other {
  if (other == [PBInviteCode defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasSendTo) {
    [self setSendTo:other.sendTo];
  }
  if (other.hasSendType) {
    [self setSendType:other.sendType];
  }
  if (other.hasOwnerUserId) {
    [self setOwnerUserId:other.ownerUserId];
  }
  if (other.hasUsedByUserId) {
    [self setUsedByUserId:other.usedByUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBInviteCodeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBInviteCodeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setSendTo:[input readString]];
        break;
      }
      case 32: {
        [self setSendType:[input readInt32]];
        break;
      }
      case 42: {
        [self setOwnerUserId:[input readString]];
        break;
      }
      case 50: {
        [self setUsedByUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultPbinviteCode.hasCode;
}
- (NSString*) code {
  return resultPbinviteCode.code;
}
- (PBInviteCodeBuilder*) setCode:(NSString*) value {
  resultPbinviteCode.hasCode = YES;
  resultPbinviteCode.code = value;
  return self;
}
- (PBInviteCodeBuilder*) clearCode {
  resultPbinviteCode.hasCode = NO;
  resultPbinviteCode.code = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPbinviteCode.hasStatus;
}
- (SInt32) status {
  return resultPbinviteCode.status;
}
- (PBInviteCodeBuilder*) setStatus:(SInt32) value {
  resultPbinviteCode.hasStatus = YES;
  resultPbinviteCode.status = value;
  return self;
}
- (PBInviteCodeBuilder*) clearStatus {
  resultPbinviteCode.hasStatus = NO;
  resultPbinviteCode.status = 0;
  return self;
}
- (BOOL) hasSendTo {
  return resultPbinviteCode.hasSendTo;
}
- (NSString*) sendTo {
  return resultPbinviteCode.sendTo;
}
- (PBInviteCodeBuilder*) setSendTo:(NSString*) value {
  resultPbinviteCode.hasSendTo = YES;
  resultPbinviteCode.sendTo = value;
  return self;
}
- (PBInviteCodeBuilder*) clearSendTo {
  resultPbinviteCode.hasSendTo = NO;
  resultPbinviteCode.sendTo = @"";
  return self;
}
- (BOOL) hasSendType {
  return resultPbinviteCode.hasSendType;
}
- (SInt32) sendType {
  return resultPbinviteCode.sendType;
}
- (PBInviteCodeBuilder*) setSendType:(SInt32) value {
  resultPbinviteCode.hasSendType = YES;
  resultPbinviteCode.sendType = value;
  return self;
}
- (PBInviteCodeBuilder*) clearSendType {
  resultPbinviteCode.hasSendType = NO;
  resultPbinviteCode.sendType = 0;
  return self;
}
- (BOOL) hasOwnerUserId {
  return resultPbinviteCode.hasOwnerUserId;
}
- (NSString*) ownerUserId {
  return resultPbinviteCode.ownerUserId;
}
- (PBInviteCodeBuilder*) setOwnerUserId:(NSString*) value {
  resultPbinviteCode.hasOwnerUserId = YES;
  resultPbinviteCode.ownerUserId = value;
  return self;
}
- (PBInviteCodeBuilder*) clearOwnerUserId {
  resultPbinviteCode.hasOwnerUserId = NO;
  resultPbinviteCode.ownerUserId = @"";
  return self;
}
- (BOOL) hasUsedByUserId {
  return resultPbinviteCode.hasUsedByUserId;
}
- (NSString*) usedByUserId {
  return resultPbinviteCode.usedByUserId;
}
- (PBInviteCodeBuilder*) setUsedByUserId:(NSString*) value {
  resultPbinviteCode.hasUsedByUserId = YES;
  resultPbinviteCode.usedByUserId = value;
  return self;
}
- (PBInviteCodeBuilder*) clearUsedByUserId {
  resultPbinviteCode.hasUsedByUserId = NO;
  resultPbinviteCode.usedByUserId = @"";
  return self;
}
@end

@interface PBUserInviteCodeList ()
@property (strong) NSString* userId;
@property (strong) NSMutableArray * availableCodesArray;
@property (strong) NSMutableArray * sentCodesArray;
@property SInt32 applyCount;
@end

@implementation PBUserInviteCodeList

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize availableCodesArray;
@dynamic availableCodes;
@synthesize sentCodesArray;
@dynamic sentCodes;
- (BOOL) hasApplyCount {
  return !!hasApplyCount_;
}
- (void) setHasApplyCount:(BOOL) _value_ {
  hasApplyCount_ = !!_value_;
}
@synthesize applyCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.applyCount = 0;
  }
  return self;
}
static PBUserInviteCodeList* defaultPBUserInviteCodeListInstance = nil;
+ (void) initialize {
  if (self == [PBUserInviteCodeList class]) {
    defaultPBUserInviteCodeListInstance = [[PBUserInviteCodeList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserInviteCodeListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserInviteCodeListInstance;
}
- (NSArray *)availableCodes {
  return availableCodesArray;
}
- (PBInviteCode*)availableCodesAtIndex:(NSUInteger)index {
  return [availableCodesArray objectAtIndex:index];
}
- (NSArray *)sentCodes {
  return sentCodesArray;
}
- (PBInviteCode*)sentCodesAtIndex:(NSUInteger)index {
  return [sentCodesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitavailableCodes = YES;
   [self.availableCodes enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitavailableCodes = NO;
      *stop = YES;
    }
  }];
  if (!isInitavailableCodes) return isInitavailableCodes;
  __block BOOL isInitsentCodes = YES;
   [self.sentCodes enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsentCodes = NO;
      *stop = YES;
    }
  }];
  if (!isInitsentCodes) return isInitsentCodes;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  [self.availableCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.sentCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasApplyCount) {
    [output writeInt32:4 value:self.applyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  [self.availableCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.sentCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasApplyCount) {
    size_ += computeInt32Size(4, self.applyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserInviteCodeList*) parseFromData:(NSData*) data {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromData:data] build];
}
+ (PBUserInviteCodeList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserInviteCodeList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromInputStream:input] build];
}
+ (PBUserInviteCodeList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserInviteCodeList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserInviteCodeList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserInviteCodeList*)[[[PBUserInviteCodeList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserInviteCodeListBuilder*) builder {
  return [[PBUserInviteCodeListBuilder alloc] init];
}
+ (PBUserInviteCodeListBuilder*) builderWithPrototype:(PBUserInviteCodeList*) prototype {
  return [[PBUserInviteCodeList builder] mergeFrom:prototype];
}
- (PBUserInviteCodeListBuilder*) builder {
  return [PBUserInviteCodeList builder];
}
- (PBUserInviteCodeListBuilder*) toBuilder {
  return [PBUserInviteCodeList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.availableCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"availableCodes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.sentCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sentCodes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithInteger:self.applyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserInviteCodeList class]]) {
    return NO;
  }
  PBUserInviteCodeList *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      [self.availableCodesArray isEqualToArray:otherMessage.availableCodesArray] &&
      [self.sentCodesArray isEqualToArray:otherMessage.sentCodesArray] &&
      self.hasApplyCount == otherMessage.hasApplyCount &&
      (!self.hasApplyCount || self.applyCount == otherMessage.applyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  [self.availableCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.sentCodesArray enumerateObjectsUsingBlock:^(PBInviteCode *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasApplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserInviteCodeListBuilder()
@property (strong) PBUserInviteCodeList* resultPbuserInviteCodeList;
@end

@implementation PBUserInviteCodeListBuilder
@synthesize resultPbuserInviteCodeList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserInviteCodeList = [[PBUserInviteCodeList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserInviteCodeList;
}
- (PBUserInviteCodeListBuilder*) clear {
  self.resultPbuserInviteCodeList = [[PBUserInviteCodeList alloc] init];
  return self;
}
- (PBUserInviteCodeListBuilder*) clone {
  return [PBUserInviteCodeList builderWithPrototype:resultPbuserInviteCodeList];
}
- (PBUserInviteCodeList*) defaultInstance {
  return [PBUserInviteCodeList defaultInstance];
}
- (PBUserInviteCodeList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserInviteCodeList*) buildPartial {
  PBUserInviteCodeList* returnMe = resultPbuserInviteCodeList;
  self.resultPbuserInviteCodeList = nil;
  return returnMe;
}
- (PBUserInviteCodeListBuilder*) mergeFrom:(PBUserInviteCodeList*) other {
  if (other == [PBUserInviteCodeList defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.availableCodesArray.count > 0) {
    if (resultPbuserInviteCodeList.availableCodesArray == nil) {
      resultPbuserInviteCodeList.availableCodesArray = [[NSMutableArray alloc] initWithArray:other.availableCodesArray];
    } else {
      [resultPbuserInviteCodeList.availableCodesArray addObjectsFromArray:other.availableCodesArray];
    }
  }
  if (other.sentCodesArray.count > 0) {
    if (resultPbuserInviteCodeList.sentCodesArray == nil) {
      resultPbuserInviteCodeList.sentCodesArray = [[NSMutableArray alloc] initWithArray:other.sentCodesArray];
    } else {
      [resultPbuserInviteCodeList.sentCodesArray addObjectsFromArray:other.sentCodesArray];
    }
  }
  if (other.hasApplyCount) {
    [self setApplyCount:other.applyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserInviteCodeListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserInviteCodeListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBInviteCodeBuilder* subBuilder = [PBInviteCode builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAvailableCodes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBInviteCodeBuilder* subBuilder = [PBInviteCode builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSentCodes:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setApplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserInviteCodeList.hasUserId;
}
- (NSString*) userId {
  return resultPbuserInviteCodeList.userId;
}
- (PBUserInviteCodeListBuilder*) setUserId:(NSString*) value {
  resultPbuserInviteCodeList.hasUserId = YES;
  resultPbuserInviteCodeList.userId = value;
  return self;
}
- (PBUserInviteCodeListBuilder*) clearUserId {
  resultPbuserInviteCodeList.hasUserId = NO;
  resultPbuserInviteCodeList.userId = @"";
  return self;
}
- (NSMutableArray *)availableCodes {
  return resultPbuserInviteCodeList.availableCodesArray;
}
- (PBInviteCode*)availableCodesAtIndex:(NSUInteger)index {
  return [resultPbuserInviteCodeList availableCodesAtIndex:index];
}
- (PBUserInviteCodeListBuilder *)addAvailableCodes:(PBInviteCode*)value {
  if (resultPbuserInviteCodeList.availableCodesArray == nil) {
    resultPbuserInviteCodeList.availableCodesArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserInviteCodeList.availableCodesArray addObject:value];
  return self;
}
- (PBUserInviteCodeListBuilder *)setAvailableCodesArray:(NSArray *)array {
  resultPbuserInviteCodeList.availableCodesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserInviteCodeListBuilder *)clearAvailableCodes {
  resultPbuserInviteCodeList.availableCodesArray = nil;
  return self;
}
- (NSMutableArray *)sentCodes {
  return resultPbuserInviteCodeList.sentCodesArray;
}
- (PBInviteCode*)sentCodesAtIndex:(NSUInteger)index {
  return [resultPbuserInviteCodeList sentCodesAtIndex:index];
}
- (PBUserInviteCodeListBuilder *)addSentCodes:(PBInviteCode*)value {
  if (resultPbuserInviteCodeList.sentCodesArray == nil) {
    resultPbuserInviteCodeList.sentCodesArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserInviteCodeList.sentCodesArray addObject:value];
  return self;
}
- (PBUserInviteCodeListBuilder *)setSentCodesArray:(NSArray *)array {
  resultPbuserInviteCodeList.sentCodesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserInviteCodeListBuilder *)clearSentCodes {
  resultPbuserInviteCodeList.sentCodesArray = nil;
  return self;
}
- (BOOL) hasApplyCount {
  return resultPbuserInviteCodeList.hasApplyCount;
}
- (SInt32) applyCount {
  return resultPbuserInviteCodeList.applyCount;
}
- (PBUserInviteCodeListBuilder*) setApplyCount:(SInt32) value {
  resultPbuserInviteCodeList.hasApplyCount = YES;
  resultPbuserInviteCodeList.applyCount = value;
  return self;
}
- (PBUserInviteCodeListBuilder*) clearApplyCount {
  resultPbuserInviteCodeList.hasApplyCount = NO;
  resultPbuserInviteCodeList.applyCount = 0;
  return self;
}
@end

@interface PBUserGroup ()
@property (strong) NSMutableArray * usersArray;
@property (strong) NSString* groupId;
@property SInt32 occurence;
@property SInt32 rejection;
@property SInt32 lastOccurenceDate;
@property SInt32 lastRejectionDate;
@end

@implementation PBUserGroup

@synthesize usersArray;
@dynamic users;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasOccurence {
  return !!hasOccurence_;
}
- (void) setHasOccurence:(BOOL) _value_ {
  hasOccurence_ = !!_value_;
}
@synthesize occurence;
- (BOOL) hasRejection {
  return !!hasRejection_;
}
- (void) setHasRejection:(BOOL) _value_ {
  hasRejection_ = !!_value_;
}
@synthesize rejection;
- (BOOL) hasLastOccurenceDate {
  return !!hasLastOccurenceDate_;
}
- (void) setHasLastOccurenceDate:(BOOL) _value_ {
  hasLastOccurenceDate_ = !!_value_;
}
@synthesize lastOccurenceDate;
- (BOOL) hasLastRejectionDate {
  return !!hasLastRejectionDate_;
}
- (void) setHasLastRejectionDate:(BOOL) _value_ {
  hasLastRejectionDate_ = !!_value_;
}
@synthesize lastRejectionDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.occurence = 0;
    self.rejection = 0;
    self.lastOccurenceDate = 0;
    self.lastRejectionDate = 0;
  }
  return self;
}
static PBUserGroup* defaultPBUserGroupInstance = nil;
+ (void) initialize {
  if (self == [PBUserGroup class]) {
    defaultPBUserGroupInstance = [[PBUserGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserGroupInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (PBUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOccurence) {
    [output writeInt32:1 value:self.occurence];
  }
  if (self.hasRejection) {
    [output writeInt32:2 value:self.rejection];
  }
  if (self.hasLastOccurenceDate) {
    [output writeInt32:3 value:self.lastOccurenceDate];
  }
  if (self.hasLastRejectionDate) {
    [output writeInt32:4 value:self.lastRejectionDate];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasGroupId) {
    [output writeString:11 value:self.groupId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOccurence) {
    size_ += computeInt32Size(1, self.occurence);
  }
  if (self.hasRejection) {
    size_ += computeInt32Size(2, self.rejection);
  }
  if (self.hasLastOccurenceDate) {
    size_ += computeInt32Size(3, self.lastOccurenceDate);
  }
  if (self.hasLastRejectionDate) {
    size_ += computeInt32Size(4, self.lastRejectionDate);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasGroupId) {
    size_ += computeStringSize(11, self.groupId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserGroup*) parseFromData:(NSData*) data {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromData:data] build];
}
+ (PBUserGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromInputStream:input] build];
}
+ (PBUserGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroup*)[[[PBUserGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroupBuilder*) builder {
  return [[PBUserGroupBuilder alloc] init];
}
+ (PBUserGroupBuilder*) builderWithPrototype:(PBUserGroup*) prototype {
  return [[PBUserGroup builder] mergeFrom:prototype];
}
- (PBUserGroupBuilder*) builder {
  return [PBUserGroup builder];
}
- (PBUserGroupBuilder*) toBuilder {
  return [PBUserGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOccurence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"occurence", [NSNumber numberWithInteger:self.occurence]];
  }
  if (self.hasRejection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rejection", [NSNumber numberWithInteger:self.rejection]];
  }
  if (self.hasLastOccurenceDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastOccurenceDate", [NSNumber numberWithInteger:self.lastOccurenceDate]];
  }
  if (self.hasLastRejectionDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastRejectionDate", [NSNumber numberWithInteger:self.lastRejectionDate]];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserGroup class]]) {
    return NO;
  }
  PBUserGroup *otherMessage = other;
  return
      self.hasOccurence == otherMessage.hasOccurence &&
      (!self.hasOccurence || self.occurence == otherMessage.occurence) &&
      self.hasRejection == otherMessage.hasRejection &&
      (!self.hasRejection || self.rejection == otherMessage.rejection) &&
      self.hasLastOccurenceDate == otherMessage.hasLastOccurenceDate &&
      (!self.hasLastOccurenceDate || self.lastOccurenceDate == otherMessage.lastOccurenceDate) &&
      self.hasLastRejectionDate == otherMessage.hasLastRejectionDate &&
      (!self.hasLastRejectionDate || self.lastRejectionDate == otherMessage.lastRejectionDate) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOccurence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.occurence] hash];
  }
  if (self.hasRejection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rejection] hash];
  }
  if (self.hasLastOccurenceDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastOccurenceDate] hash];
  }
  if (self.hasLastRejectionDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastRejectionDate] hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserGroupBuilder()
@property (strong) PBUserGroup* resultPbuserGroup;
@end

@implementation PBUserGroupBuilder
@synthesize resultPbuserGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserGroup = [[PBUserGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserGroup;
}
- (PBUserGroupBuilder*) clear {
  self.resultPbuserGroup = [[PBUserGroup alloc] init];
  return self;
}
- (PBUserGroupBuilder*) clone {
  return [PBUserGroup builderWithPrototype:resultPbuserGroup];
}
- (PBUserGroup*) defaultInstance {
  return [PBUserGroup defaultInstance];
}
- (PBUserGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserGroup*) buildPartial {
  PBUserGroup* returnMe = resultPbuserGroup;
  self.resultPbuserGroup = nil;
  return returnMe;
}
- (PBUserGroupBuilder*) mergeFrom:(PBUserGroup*) other {
  if (other == [PBUserGroup defaultInstance]) {
    return self;
  }
  if (other.usersArray.count > 0) {
    if (resultPbuserGroup.usersArray == nil) {
      resultPbuserGroup.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultPbuserGroup.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasOccurence) {
    [self setOccurence:other.occurence];
  }
  if (other.hasRejection) {
    [self setRejection:other.rejection];
  }
  if (other.hasLastOccurenceDate) {
    [self setLastOccurenceDate:other.lastOccurenceDate];
  }
  if (other.hasLastRejectionDate) {
    [self setLastRejectionDate:other.lastRejectionDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOccurence:[input readInt32]];
        break;
      }
      case 16: {
        [self setRejection:[input readInt32]];
        break;
      }
      case 24: {
        [self setLastOccurenceDate:[input readInt32]];
        break;
      }
      case 32: {
        [self setLastRejectionDate:[input readInt32]];
        break;
      }
      case 82: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setGroupId:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)users {
  return resultPbuserGroup.usersArray;
}
- (PBUser*)usersAtIndex:(NSUInteger)index {
  return [resultPbuserGroup usersAtIndex:index];
}
- (PBUserGroupBuilder *)addUsers:(PBUser*)value {
  if (resultPbuserGroup.usersArray == nil) {
    resultPbuserGroup.usersArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserGroup.usersArray addObject:value];
  return self;
}
- (PBUserGroupBuilder *)setUsersArray:(NSArray *)array {
  resultPbuserGroup.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserGroupBuilder *)clearUsers {
  resultPbuserGroup.usersArray = nil;
  return self;
}
- (BOOL) hasGroupId {
  return resultPbuserGroup.hasGroupId;
}
- (NSString*) groupId {
  return resultPbuserGroup.groupId;
}
- (PBUserGroupBuilder*) setGroupId:(NSString*) value {
  resultPbuserGroup.hasGroupId = YES;
  resultPbuserGroup.groupId = value;
  return self;
}
- (PBUserGroupBuilder*) clearGroupId {
  resultPbuserGroup.hasGroupId = NO;
  resultPbuserGroup.groupId = @"";
  return self;
}
- (BOOL) hasOccurence {
  return resultPbuserGroup.hasOccurence;
}
- (SInt32) occurence {
  return resultPbuserGroup.occurence;
}
- (PBUserGroupBuilder*) setOccurence:(SInt32) value {
  resultPbuserGroup.hasOccurence = YES;
  resultPbuserGroup.occurence = value;
  return self;
}
- (PBUserGroupBuilder*) clearOccurence {
  resultPbuserGroup.hasOccurence = NO;
  resultPbuserGroup.occurence = 0;
  return self;
}
- (BOOL) hasRejection {
  return resultPbuserGroup.hasRejection;
}
- (SInt32) rejection {
  return resultPbuserGroup.rejection;
}
- (PBUserGroupBuilder*) setRejection:(SInt32) value {
  resultPbuserGroup.hasRejection = YES;
  resultPbuserGroup.rejection = value;
  return self;
}
- (PBUserGroupBuilder*) clearRejection {
  resultPbuserGroup.hasRejection = NO;
  resultPbuserGroup.rejection = 0;
  return self;
}
- (BOOL) hasLastOccurenceDate {
  return resultPbuserGroup.hasLastOccurenceDate;
}
- (SInt32) lastOccurenceDate {
  return resultPbuserGroup.lastOccurenceDate;
}
- (PBUserGroupBuilder*) setLastOccurenceDate:(SInt32) value {
  resultPbuserGroup.hasLastOccurenceDate = YES;
  resultPbuserGroup.lastOccurenceDate = value;
  return self;
}
- (PBUserGroupBuilder*) clearLastOccurenceDate {
  resultPbuserGroup.hasLastOccurenceDate = NO;
  resultPbuserGroup.lastOccurenceDate = 0;
  return self;
}
- (BOOL) hasLastRejectionDate {
  return resultPbuserGroup.hasLastRejectionDate;
}
- (SInt32) lastRejectionDate {
  return resultPbuserGroup.lastRejectionDate;
}
- (PBUserGroupBuilder*) setLastRejectionDate:(SInt32) value {
  resultPbuserGroup.hasLastRejectionDate = YES;
  resultPbuserGroup.lastRejectionDate = value;
  return self;
}
- (PBUserGroupBuilder*) clearLastRejectionDate {
  resultPbuserGroup.hasLastRejectionDate = NO;
  resultPbuserGroup.lastRejectionDate = 0;
  return self;
}
@end

@interface PBUserGroupList ()
@property (strong) NSMutableArray * groupsArray;
@end

@implementation PBUserGroupList

@synthesize groupsArray;
@dynamic groups;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBUserGroupList* defaultPBUserGroupListInstance = nil;
+ (void) initialize {
  if (self == [PBUserGroupList class]) {
    defaultPBUserGroupListInstance = [[PBUserGroupList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserGroupListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserGroupListInstance;
}
- (NSArray *)groups {
  return groupsArray;
}
- (PBUserGroup*)groupsAtIndex:(NSUInteger)index {
  return [groupsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitgroups = YES;
   [self.groups enumerateObjectsUsingBlock:^(PBUserGroup *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroups = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroups) return isInitgroups;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.groupsArray enumerateObjectsUsingBlock:^(PBUserGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.groupsArray enumerateObjectsUsingBlock:^(PBUserGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserGroupList*) parseFromData:(NSData*) data {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromData:data] build];
}
+ (PBUserGroupList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroupList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromInputStream:input] build];
}
+ (PBUserGroupList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroupList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserGroupList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserGroupList*)[[[PBUserGroupList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserGroupListBuilder*) builder {
  return [[PBUserGroupListBuilder alloc] init];
}
+ (PBUserGroupListBuilder*) builderWithPrototype:(PBUserGroupList*) prototype {
  return [[PBUserGroupList builder] mergeFrom:prototype];
}
- (PBUserGroupListBuilder*) builder {
  return [PBUserGroupList builder];
}
- (PBUserGroupListBuilder*) toBuilder {
  return [PBUserGroupList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.groupsArray enumerateObjectsUsingBlock:^(PBUserGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groups"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserGroupList class]]) {
    return NO;
  }
  PBUserGroupList *otherMessage = other;
  return
      [self.groupsArray isEqualToArray:otherMessage.groupsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.groupsArray enumerateObjectsUsingBlock:^(PBUserGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserGroupListBuilder()
@property (strong) PBUserGroupList* resultPbuserGroupList;
@end

@implementation PBUserGroupListBuilder
@synthesize resultPbuserGroupList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserGroupList = [[PBUserGroupList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserGroupList;
}
- (PBUserGroupListBuilder*) clear {
  self.resultPbuserGroupList = [[PBUserGroupList alloc] init];
  return self;
}
- (PBUserGroupListBuilder*) clone {
  return [PBUserGroupList builderWithPrototype:resultPbuserGroupList];
}
- (PBUserGroupList*) defaultInstance {
  return [PBUserGroupList defaultInstance];
}
- (PBUserGroupList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserGroupList*) buildPartial {
  PBUserGroupList* returnMe = resultPbuserGroupList;
  self.resultPbuserGroupList = nil;
  return returnMe;
}
- (PBUserGroupListBuilder*) mergeFrom:(PBUserGroupList*) other {
  if (other == [PBUserGroupList defaultInstance]) {
    return self;
  }
  if (other.groupsArray.count > 0) {
    if (resultPbuserGroupList.groupsArray == nil) {
      resultPbuserGroupList.groupsArray = [[NSMutableArray alloc] initWithArray:other.groupsArray];
    } else {
      [resultPbuserGroupList.groupsArray addObjectsFromArray:other.groupsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserGroupListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserGroupListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserGroupBuilder* subBuilder = [PBUserGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroups:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)groups {
  return resultPbuserGroupList.groupsArray;
}
- (PBUserGroup*)groupsAtIndex:(NSUInteger)index {
  return [resultPbuserGroupList groupsAtIndex:index];
}
- (PBUserGroupListBuilder *)addGroups:(PBUserGroup*)value {
  if (resultPbuserGroupList.groupsArray == nil) {
    resultPbuserGroupList.groupsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserGroupList.groupsArray addObject:value];
  return self;
}
- (PBUserGroupListBuilder *)setGroupsArray:(NSArray *)array {
  resultPbuserGroupList.groupsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserGroupListBuilder *)clearGroups {
  resultPbuserGroupList.groupsArray = nil;
  return self;
}
@end

@interface PBChat ()
@property (strong) NSString* chatId;
@property (strong) NSString* sessionId;
@property (strong) PBUser* fromUser;
@property (strong) NSString* fromUserId;
@property (strong) PBDevice* fromDevice;
@property (strong) PBUser* toUser;
@property (strong) NSString* toUserId;
@property (strong) NSString* text;
@property (strong) NSString* image;
@property (strong) NSString* thumb;
@property (strong) NSString* voice;
@property SInt32 createDate;
@property SInt32 status;
@property SInt32 type;
@property SInt32 source;
@end

@implementation PBChat

- (BOOL) hasChatId {
  return !!hasChatId_;
}
- (void) setHasChatId:(BOOL) _value_ {
  hasChatId_ = !!_value_;
}
@synthesize chatId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasFromUser {
  return !!hasFromUser_;
}
- (void) setHasFromUser:(BOOL) _value_ {
  hasFromUser_ = !!_value_;
}
@synthesize fromUser;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasFromDevice {
  return !!hasFromDevice_;
}
- (void) setHasFromDevice:(BOOL) _value_ {
  hasFromDevice_ = !!_value_;
}
@synthesize fromDevice;
- (BOOL) hasToUser {
  return !!hasToUser_;
}
- (void) setHasToUser:(BOOL) _value_ {
  hasToUser_ = !!_value_;
}
@synthesize toUser;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasThumb {
  return !!hasThumb_;
}
- (void) setHasThumb:(BOOL) _value_ {
  hasThumb_ = !!_value_;
}
@synthesize thumb;
- (BOOL) hasVoice {
  return !!hasVoice_;
}
- (void) setHasVoice:(BOOL) _value_ {
  hasVoice_ = !!_value_;
}
@synthesize voice;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (instancetype) init {
  if ((self = [super init])) {
    self.chatId = @"";
    self.sessionId = @"";
    self.fromUser = [PBUser defaultInstance];
    self.fromUserId = @"";
    self.fromDevice = [PBDevice defaultInstance];
    self.toUser = [PBUser defaultInstance];
    self.toUserId = @"";
    self.text = @"";
    self.image = @"";
    self.thumb = @"";
    self.voice = @"";
    self.createDate = 0;
    self.status = 0;
    self.type = 0;
    self.source = 0;
  }
  return self;
}
static PBChat* defaultPBChatInstance = nil;
+ (void) initialize {
  if (self == [PBChat class]) {
    defaultPBChatInstance = [[PBChat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBChatInstance;
}
- (instancetype) defaultInstance {
  return defaultPBChatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChatId) {
    return NO;
  }
  if (self.hasFromUser) {
    if (!self.fromUser.isInitialized) {
      return NO;
    }
  }
  if (self.hasFromDevice) {
    if (!self.fromDevice.isInitialized) {
      return NO;
    }
  }
  if (self.hasToUser) {
    if (!self.toUser.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChatId) {
    [output writeString:1 value:self.chatId];
  }
  if (self.hasSessionId) {
    [output writeString:2 value:self.sessionId];
  }
  if (self.hasFromUser) {
    [output writeMessage:3 value:self.fromUser];
  }
  if (self.hasFromUserId) {
    [output writeString:4 value:self.fromUserId];
  }
  if (self.hasFromDevice) {
    [output writeMessage:5 value:self.fromDevice];
  }
  if (self.hasToUser) {
    [output writeMessage:6 value:self.toUser];
  }
  if (self.hasToUserId) {
    [output writeString:7 value:self.toUserId];
  }
  if (self.hasText) {
    [output writeString:10 value:self.text];
  }
  if (self.hasImage) {
    [output writeString:11 value:self.image];
  }
  if (self.hasThumb) {
    [output writeString:12 value:self.thumb];
  }
  if (self.hasVoice) {
    [output writeString:13 value:self.voice];
  }
  if (self.hasCreateDate) {
    [output writeInt32:20 value:self.createDate];
  }
  if (self.hasStatus) {
    [output writeInt32:21 value:self.status];
  }
  if (self.hasType) {
    [output writeInt32:22 value:self.type];
  }
  if (self.hasSource) {
    [output writeInt32:23 value:self.source];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChatId) {
    size_ += computeStringSize(1, self.chatId);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(2, self.sessionId);
  }
  if (self.hasFromUser) {
    size_ += computeMessageSize(3, self.fromUser);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(4, self.fromUserId);
  }
  if (self.hasFromDevice) {
    size_ += computeMessageSize(5, self.fromDevice);
  }
  if (self.hasToUser) {
    size_ += computeMessageSize(6, self.toUser);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(7, self.toUserId);
  }
  if (self.hasText) {
    size_ += computeStringSize(10, self.text);
  }
  if (self.hasImage) {
    size_ += computeStringSize(11, self.image);
  }
  if (self.hasThumb) {
    size_ += computeStringSize(12, self.thumb);
  }
  if (self.hasVoice) {
    size_ += computeStringSize(13, self.voice);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(20, self.createDate);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(21, self.status);
  }
  if (self.hasType) {
    size_ += computeInt32Size(22, self.type);
  }
  if (self.hasSource) {
    size_ += computeInt32Size(23, self.source);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBChat*) parseFromData:(NSData*) data {
  return (PBChat*)[[[PBChat builder] mergeFromData:data] build];
}
+ (PBChat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChat*)[[[PBChat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBChat*) parseFromInputStream:(NSInputStream*) input {
  return (PBChat*)[[[PBChat builder] mergeFromInputStream:input] build];
}
+ (PBChat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChat*)[[[PBChat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBChat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBChat*)[[[PBChat builder] mergeFromCodedInputStream:input] build];
}
+ (PBChat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChat*)[[[PBChat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBChatBuilder*) builder {
  return [[PBChatBuilder alloc] init];
}
+ (PBChatBuilder*) builderWithPrototype:(PBChat*) prototype {
  return [[PBChat builder] mergeFrom:prototype];
}
- (PBChatBuilder*) builder {
  return [PBChat builder];
}
- (PBChatBuilder*) toBuilder {
  return [PBChat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChatId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatId", self.chatId];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasFromUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromUser"];
    [self.fromUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasFromDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromDevice"];
    [self.fromDevice writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasToUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"toUser"];
    [self.toUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasThumb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumb", self.thumb];
  }
  if (self.hasVoice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voice", self.voice];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", [NSNumber numberWithInteger:self.source]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBChat class]]) {
    return NO;
  }
  PBChat *otherMessage = other;
  return
      self.hasChatId == otherMessage.hasChatId &&
      (!self.hasChatId || [self.chatId isEqual:otherMessage.chatId]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasFromUser == otherMessage.hasFromUser &&
      (!self.hasFromUser || [self.fromUser isEqual:otherMessage.fromUser]) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasFromDevice == otherMessage.hasFromDevice &&
      (!self.hasFromDevice || [self.fromDevice isEqual:otherMessage.fromDevice]) &&
      self.hasToUser == otherMessage.hasToUser &&
      (!self.hasToUser || [self.toUser isEqual:otherMessage.toUser]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasThumb == otherMessage.hasThumb &&
      (!self.hasThumb || [self.thumb isEqual:otherMessage.thumb]) &&
      self.hasVoice == otherMessage.hasVoice &&
      (!self.hasVoice || [self.voice isEqual:otherMessage.voice]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || self.source == otherMessage.source) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChatId) {
    hashCode = hashCode * 31 + [self.chatId hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasFromUser) {
    hashCode = hashCode * 31 + [self.fromUser hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasFromDevice) {
    hashCode = hashCode * 31 + [self.fromDevice hash];
  }
  if (self.hasToUser) {
    hashCode = hashCode * 31 + [self.toUser hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasThumb) {
    hashCode = hashCode * 31 + [self.thumb hash];
  }
  if (self.hasVoice) {
    hashCode = hashCode * 31 + [self.voice hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.source] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBChatBuilder()
@property (strong) PBChat* resultPbchat;
@end

@implementation PBChatBuilder
@synthesize resultPbchat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbchat = [[PBChat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbchat;
}
- (PBChatBuilder*) clear {
  self.resultPbchat = [[PBChat alloc] init];
  return self;
}
- (PBChatBuilder*) clone {
  return [PBChat builderWithPrototype:resultPbchat];
}
- (PBChat*) defaultInstance {
  return [PBChat defaultInstance];
}
- (PBChat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBChat*) buildPartial {
  PBChat* returnMe = resultPbchat;
  self.resultPbchat = nil;
  return returnMe;
}
- (PBChatBuilder*) mergeFrom:(PBChat*) other {
  if (other == [PBChat defaultInstance]) {
    return self;
  }
  if (other.hasChatId) {
    [self setChatId:other.chatId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasFromUser) {
    [self mergeFromUser:other.fromUser];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFromDevice) {
    [self mergeFromDevice:other.fromDevice];
  }
  if (other.hasToUser) {
    [self mergeToUser:other.toUser];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasThumb) {
    [self setThumb:other.thumb];
  }
  if (other.hasVoice) {
    [self setVoice:other.voice];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBChatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBChatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setChatId:[input readString]];
        break;
      }
      case 18: {
        [self setSessionId:[input readString]];
        break;
      }
      case 26: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasFromUser) {
          [subBuilder mergeFrom:self.fromUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromUser:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 42: {
        PBDeviceBuilder* subBuilder = [PBDevice builder];
        if (self.hasFromDevice) {
          [subBuilder mergeFrom:self.fromDevice];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromDevice:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasToUser) {
          [subBuilder mergeFrom:self.toUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setToUser:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setToUserId:[input readString]];
        break;
      }
      case 82: {
        [self setText:[input readString]];
        break;
      }
      case 90: {
        [self setImage:[input readString]];
        break;
      }
      case 98: {
        [self setThumb:[input readString]];
        break;
      }
      case 106: {
        [self setVoice:[input readString]];
        break;
      }
      case 160: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 168: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 176: {
        [self setType:[input readInt32]];
        break;
      }
      case 184: {
        [self setSource:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasChatId {
  return resultPbchat.hasChatId;
}
- (NSString*) chatId {
  return resultPbchat.chatId;
}
- (PBChatBuilder*) setChatId:(NSString*) value {
  resultPbchat.hasChatId = YES;
  resultPbchat.chatId = value;
  return self;
}
- (PBChatBuilder*) clearChatId {
  resultPbchat.hasChatId = NO;
  resultPbchat.chatId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultPbchat.hasSessionId;
}
- (NSString*) sessionId {
  return resultPbchat.sessionId;
}
- (PBChatBuilder*) setSessionId:(NSString*) value {
  resultPbchat.hasSessionId = YES;
  resultPbchat.sessionId = value;
  return self;
}
- (PBChatBuilder*) clearSessionId {
  resultPbchat.hasSessionId = NO;
  resultPbchat.sessionId = @"";
  return self;
}
- (BOOL) hasFromUser {
  return resultPbchat.hasFromUser;
}
- (PBUser*) fromUser {
  return resultPbchat.fromUser;
}
- (PBChatBuilder*) setFromUser:(PBUser*) value {
  resultPbchat.hasFromUser = YES;
  resultPbchat.fromUser = value;
  return self;
}
- (PBChatBuilder*) setFromUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setFromUser:[builderForValue build]];
}
- (PBChatBuilder*) mergeFromUser:(PBUser*) value {
  if (resultPbchat.hasFromUser &&
      resultPbchat.fromUser != [PBUser defaultInstance]) {
    resultPbchat.fromUser =
      [[[PBUser builderWithPrototype:resultPbchat.fromUser] mergeFrom:value] buildPartial];
  } else {
    resultPbchat.fromUser = value;
  }
  resultPbchat.hasFromUser = YES;
  return self;
}
- (PBChatBuilder*) clearFromUser {
  resultPbchat.hasFromUser = NO;
  resultPbchat.fromUser = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasFromUserId {
  return resultPbchat.hasFromUserId;
}
- (NSString*) fromUserId {
  return resultPbchat.fromUserId;
}
- (PBChatBuilder*) setFromUserId:(NSString*) value {
  resultPbchat.hasFromUserId = YES;
  resultPbchat.fromUserId = value;
  return self;
}
- (PBChatBuilder*) clearFromUserId {
  resultPbchat.hasFromUserId = NO;
  resultPbchat.fromUserId = @"";
  return self;
}
- (BOOL) hasFromDevice {
  return resultPbchat.hasFromDevice;
}
- (PBDevice*) fromDevice {
  return resultPbchat.fromDevice;
}
- (PBChatBuilder*) setFromDevice:(PBDevice*) value {
  resultPbchat.hasFromDevice = YES;
  resultPbchat.fromDevice = value;
  return self;
}
- (PBChatBuilder*) setFromDeviceBuilder:(PBDeviceBuilder*) builderForValue {
  return [self setFromDevice:[builderForValue build]];
}
- (PBChatBuilder*) mergeFromDevice:(PBDevice*) value {
  if (resultPbchat.hasFromDevice &&
      resultPbchat.fromDevice != [PBDevice defaultInstance]) {
    resultPbchat.fromDevice =
      [[[PBDevice builderWithPrototype:resultPbchat.fromDevice] mergeFrom:value] buildPartial];
  } else {
    resultPbchat.fromDevice = value;
  }
  resultPbchat.hasFromDevice = YES;
  return self;
}
- (PBChatBuilder*) clearFromDevice {
  resultPbchat.hasFromDevice = NO;
  resultPbchat.fromDevice = [PBDevice defaultInstance];
  return self;
}
- (BOOL) hasToUser {
  return resultPbchat.hasToUser;
}
- (PBUser*) toUser {
  return resultPbchat.toUser;
}
- (PBChatBuilder*) setToUser:(PBUser*) value {
  resultPbchat.hasToUser = YES;
  resultPbchat.toUser = value;
  return self;
}
- (PBChatBuilder*) setToUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setToUser:[builderForValue build]];
}
- (PBChatBuilder*) mergeToUser:(PBUser*) value {
  if (resultPbchat.hasToUser &&
      resultPbchat.toUser != [PBUser defaultInstance]) {
    resultPbchat.toUser =
      [[[PBUser builderWithPrototype:resultPbchat.toUser] mergeFrom:value] buildPartial];
  } else {
    resultPbchat.toUser = value;
  }
  resultPbchat.hasToUser = YES;
  return self;
}
- (PBChatBuilder*) clearToUser {
  resultPbchat.hasToUser = NO;
  resultPbchat.toUser = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasToUserId {
  return resultPbchat.hasToUserId;
}
- (NSString*) toUserId {
  return resultPbchat.toUserId;
}
- (PBChatBuilder*) setToUserId:(NSString*) value {
  resultPbchat.hasToUserId = YES;
  resultPbchat.toUserId = value;
  return self;
}
- (PBChatBuilder*) clearToUserId {
  resultPbchat.hasToUserId = NO;
  resultPbchat.toUserId = @"";
  return self;
}
- (BOOL) hasText {
  return resultPbchat.hasText;
}
- (NSString*) text {
  return resultPbchat.text;
}
- (PBChatBuilder*) setText:(NSString*) value {
  resultPbchat.hasText = YES;
  resultPbchat.text = value;
  return self;
}
- (PBChatBuilder*) clearText {
  resultPbchat.hasText = NO;
  resultPbchat.text = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbchat.hasImage;
}
- (NSString*) image {
  return resultPbchat.image;
}
- (PBChatBuilder*) setImage:(NSString*) value {
  resultPbchat.hasImage = YES;
  resultPbchat.image = value;
  return self;
}
- (PBChatBuilder*) clearImage {
  resultPbchat.hasImage = NO;
  resultPbchat.image = @"";
  return self;
}
- (BOOL) hasThumb {
  return resultPbchat.hasThumb;
}
- (NSString*) thumb {
  return resultPbchat.thumb;
}
- (PBChatBuilder*) setThumb:(NSString*) value {
  resultPbchat.hasThumb = YES;
  resultPbchat.thumb = value;
  return self;
}
- (PBChatBuilder*) clearThumb {
  resultPbchat.hasThumb = NO;
  resultPbchat.thumb = @"";
  return self;
}
- (BOOL) hasVoice {
  return resultPbchat.hasVoice;
}
- (NSString*) voice {
  return resultPbchat.voice;
}
- (PBChatBuilder*) setVoice:(NSString*) value {
  resultPbchat.hasVoice = YES;
  resultPbchat.voice = value;
  return self;
}
- (PBChatBuilder*) clearVoice {
  resultPbchat.hasVoice = NO;
  resultPbchat.voice = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbchat.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbchat.createDate;
}
- (PBChatBuilder*) setCreateDate:(SInt32) value {
  resultPbchat.hasCreateDate = YES;
  resultPbchat.createDate = value;
  return self;
}
- (PBChatBuilder*) clearCreateDate {
  resultPbchat.hasCreateDate = NO;
  resultPbchat.createDate = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPbchat.hasStatus;
}
- (SInt32) status {
  return resultPbchat.status;
}
- (PBChatBuilder*) setStatus:(SInt32) value {
  resultPbchat.hasStatus = YES;
  resultPbchat.status = value;
  return self;
}
- (PBChatBuilder*) clearStatus {
  resultPbchat.hasStatus = NO;
  resultPbchat.status = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbchat.hasType;
}
- (SInt32) type {
  return resultPbchat.type;
}
- (PBChatBuilder*) setType:(SInt32) value {
  resultPbchat.hasType = YES;
  resultPbchat.type = value;
  return self;
}
- (PBChatBuilder*) clearType {
  resultPbchat.hasType = NO;
  resultPbchat.type = 0;
  return self;
}
- (BOOL) hasSource {
  return resultPbchat.hasSource;
}
- (SInt32) source {
  return resultPbchat.source;
}
- (PBChatBuilder*) setSource:(SInt32) value {
  resultPbchat.hasSource = YES;
  resultPbchat.source = value;
  return self;
}
- (PBChatBuilder*) clearSource {
  resultPbchat.hasSource = NO;
  resultPbchat.source = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
